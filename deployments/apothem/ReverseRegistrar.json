{
  "address": "0x82e3910F0B8474DCA219AdB093ded73558Ee92CF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "contract NameResolver",
          "name": "resolverAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ReverseClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claimForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "claimWithResolver",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "claimWithResolverForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultResolver",
      "outputs": [
        {
          "internalType": "contract NameResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setNameForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe3a13c4b447feaf58428ba180f7702cf20e5f34c758276d0bddb14d89f8c275",
  "receipt": {
    "to": null,
    "from": "0x3c2070a2E512dD97881Df8fa0Af8f9889872FCAd",
    "contractAddress": "0x82e3910F0B8474DCA219AdB093ded73558Ee92CF",
    "transactionIndex": 1,
    "gasUsed": "1555932",
    "logsBloom": "0x00000000000000000000000000000000000000000400000000800000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000008000000000000800000000000000000000020000000000400000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000040000000000000000000000000000000000000000",
    "blockHash": "0x12b73b578b5f881bbf01a4d7fb338e11050e1802908580bcdde48653fe7f7836",
    "transactionHash": "0xfe3a13c4b447feaf58428ba180f7702cf20e5f34c758276d0bddb14d89f8c275",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33797196,
        "transactionHash": "0xfe3a13c4b447feaf58428ba180f7702cf20e5f34c758276d0bddb14d89f8c275",
        "address": "0x82e3910F0B8474DCA219AdB093ded73558Ee92CF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c2070a2e512dd97881df8fa0af8f9889872fcad"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x951029ff0228ec65009d319983160b6b5ee1354c6882d42aee60ea3be7d1accc"
      }
    ],
    "blockNumber": 33797196,
    "cumulativeGasUsed": "1555932",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaF23579Ee261153dA46a41c618E5BE05C7E301FB",
    "0xA5b3388fe6C1988007D057f2F21400B9E3b2C5EC"
  ],
  "solcInputHash": "e30131e1c96881dfa8dc893a3cb25fb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract NameResolver\",\"name\":\"resolverAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ReverseClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claimForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolverForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultResolver\",\"outputs\":[{\"internalType\":\"contract NameResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"owner\":\"The address to set as the owner of the reverse record in ENS.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"claimForAddr(address,address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"addr\":\"The reverse record to set\",\"owner\":\"The address to set as the owner of the reverse record in ENS.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"claimWithResolver(address,address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"owner\":\"The address to set as the owner of the reverse record in ENS.\",\"resolver\":\"The address of the resolver to set; 0 to leave unchanged.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"claimWithResolverForAddr(address,address,address)\":{\"details\":\"Transfers ownership of the reverse ENS record specified with the      address provided\",\"params\":{\"addr\":\"The reverse record to set\",\"owner\":\"The address to set as the owner of the reverse record in ENS.\",\"resolver\":\"The address of the resolver to set; 0 to leave unchanged.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"ensAddr\":\"The address of the ENS registry.\",\"resolverAddr\":\"The address of the default reverse resolver.\"}},\"node(address)\":{\"details\":\"Returns the node hash for a given account's reverse records.\",\"params\":{\"addr\":\"The address to hash\"},\"returns\":{\"_0\":\"The ENS node hash.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setName(string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddr(address,address,string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the account provided. First updates the resolver to the default reverse resolver if necessary. Only callable by controllers and authorised users\",\"params\":{\"addr\":\"The reverse record to set\",\"name\":\"The name to set for this address.\",\"owner\":\"The owner of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/ReverseRegistrar.sol\":\"ReverseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable {\\n    ENS public ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ENS ensAddr, NameResolver resolverAddr) {\\n        ens = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return _claimWithResolver(msg.sender, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(address addr, address owner)\\n        public\\n        authorised(addr)\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(addr, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record specified with the\\n     *      address provided\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolverForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public authorised(addr) returns (bytes32) {\\n        return _claimWithResolver(addr, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            msg.sender,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        string memory name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            addr,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        ens.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _claimWithResolver(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) internal returns (bytes32) {\\n        bytes32 label = sha3HexAddress(addr);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentResolver = ens.resolver(node);\\n        bool shouldUpdateResolver = (resolver != address(0x0) &&\\n            resolver != currentResolver);\\n        address newResolver = shouldUpdateResolver ? resolver : currentResolver;\\n\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, label, owner, newResolver, 0);\\n\\n        emit ReverseClaimed(addr, node);\\n\\n        return node;\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6151b50f057afe5e32f9ef2f05b3c5c3ac8719b5900aead76d60be4356997ef6\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200175f3803806200175f8339810160408190526200003491620001e4565b6200003f336200017b565b600280546001600160a01b038481166001600160a01b0319928316811790935560038054918516919092161790556040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152600091906302571be390602401602060405180830381865afa158015620000cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f1919062000223565b90506001600160a01b038116156200017257604051630f41a04d60e11b81523360048201526001600160a01b03821690631e83409a906024016020604051808303816000875af11580156200014a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017091906200024a565b505b50505062000264565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001e157600080fd5b50565b60008060408385031215620001f857600080fd5b82516200020581620001cb565b60208401519092506200021881620001cb565b809150509250929050565b6000602082840312156200023657600080fd5b81516200024381620001cb565b9392505050565b6000602082840312156200025d57600080fd5b5051919050565b6114eb80620002746000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638d9522b81161008c578063c47f002711610066578063c47f002714610201578063da8c229e14610214578063e0dba60f14610247578063f2fde38b1461025a57600080fd5b80638d9522b8146101bd5780638da5cb5b146101d0578063bffbe61c146101ee57600080fd5b80633f15457f116100c85780633f15457f1461013b5780634709bf4b14610180578063715018a614610193578063828eab0e1461019d57600080fd5b80630ccc4a7f146100ef5780630f5a5466146101155780631e83409a14610128575b600080fd5b6101026100fd366004611199565b61026d565b6040519081526020015b60405180910390f35b6101026101233660046111e4565b61041d565b61010261013636600461121d565b610431565b60025461015b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010c565b61010261018e3660046111e4565b610445565b61019b6105f0565b005b60035461015b9073ffffffffffffffffffffffffffffffffffffffff1681565b6101026101cb366004611314565b61067d565b60005473ffffffffffffffffffffffffffffffffffffffff1661015b565b6101026101fc36600461121d565b6109b7565b61010261020f366004611376565b610a12565b61023761022236600461121d565b60016020526000908152604090205460ff1681565b604051901515815260200161010c565b61019b6102553660046113b9565b610acf565b61019b61026836600461121d565b610bda565b60008373ffffffffffffffffffffffffffffffffffffffff81163314806102a357503360009081526001602052604090205460ff165b8061034357506002546040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301529091169063e985e9c590604401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034391906113e7565b80610352575061035281610d0a565b610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617560448201527f74686f72697365642062792061646472657373206f722074686520616464726560648201527f737320697473656c660000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b610414858585610dbb565b95945050505050565b600061042a338484610dbb565b9392505050565b600061043f33836000610dbb565b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff811633148061047b57503360009081526001602052604090205460ff165b8061051b57506002546040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301529091169063e985e9c590604401602060405180830381865afa1580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906113e7565b8061052a575061052a81610d0a565b6105dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617560448201527f74686f72697365642062792061646472657373206f722074686520616464726560648201527f737320697473656c660000000000000000000000000000000000000000000000608482015260a401610400565b6105e884846000610dbb565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b61067b6000611046565b565b60008373ffffffffffffffffffffffffffffffffffffffff81163314806106b357503360009081526001602052604090205460ff165b8061075357506002546040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301529091169063e985e9c590604401602060405180830381865afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075391906113e7565b80610762575061076281610d0a565b610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617560448201527f74686f72697365642062792061646472657373206f722074686520616464726560648201527f737320697473656c660000000000000000000000000000000000000000000000608482015260a401610400565b60035460009061083d908790309073ffffffffffffffffffffffffffffffffffffffff16610dbb565b6003546040517f7737221300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff16906377372213906108969084908890600401611404565b600060405180830381600087803b1580156108b057600080fd5b505af11580156108c4573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506306ab592390507f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610912896110bb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff881660448201526064016020604051808303816000875af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad919061147f565b5095945050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26109e3836110bb565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b6003546000908190610a3d903390309073ffffffffffffffffffffffffffffffffffffffff16610dbb565b6003546040517f7737221300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff1690637737221390610a969084908790600401611404565b600060405180830381600087803b158015610ab057600080fd5b505af1158015610ac4573d6000803e3d6000fd5b509295945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b73ffffffffffffffffffffffffffffffffffffffff8116610cfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610400565b610d0781611046565b50565b60008173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d91575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610d8e91810190611498565b60015b610d9d57506000919050565b73ffffffffffffffffffffffffffffffffffffffff16331492915050565b600080610dc7856110bb565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26020820152908101829052909150600090606001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206002547f0178b8bf0000000000000000000000000000000000000000000000000000000083526004830182905290925060009173ffffffffffffffffffffffffffffffffffffffff90911690630178b8bf90602401602060405180830381865afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecd9190611498565b9050600073ffffffffffffffffffffffffffffffffffffffff861615801590610f2257508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b9050600081610f315782610f33565b865b6002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526024810188905273ffffffffffffffffffffffffffffffffffffffff8b81166044830152808416606483015260006084830152929350911690635ef2c7f09060a401600060405180830381600087803b158015610fde57600080fd5b505af1158015610ff2573d6000803e3d6000fd5b505060405186925073ffffffffffffffffffffffffffffffffffffffff8c1691507f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a35091979650505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060285b801561116b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010909204917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506110c0565b50506028600020919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d0757600080fd5b6000806000606084860312156111ae57600080fd5b83356111b981611177565b925060208401356111c981611177565b915060408401356111d981611177565b809150509250925092565b600080604083850312156111f757600080fd5b823561120281611177565b9150602083013561121281611177565b809150509250929050565b60006020828403121561122f57600080fd5b813561042a81611177565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261127a57600080fd5b813567ffffffffffffffff808211156112955761129561123a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156112db576112db61123a565b816040528381528660208588010111156112f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561132957600080fd5b833561133481611177565b9250602084013561134481611177565b9150604084013567ffffffffffffffff81111561136057600080fd5b61136c86828701611269565b9150509250925092565b60006020828403121561138857600080fd5b813567ffffffffffffffff81111561139f57600080fd5b6105e884828501611269565b8015158114610d0757600080fd5b600080604083850312156113cc57600080fd5b82356113d781611177565b91506020830135611212816113ab565b6000602082840312156113f957600080fd5b815161042a816113ab565b82815260006020604081840152835180604085015260005b818110156114385785810183015185820160600152820161141c565b8181111561144a576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b60006020828403121561149157600080fd5b5051919050565b6000602082840312156114aa57600080fd5b815161042a8161117756fea2646970667358221220cdb80b58bafc55188af16e232c215fe9e7c85168899d8290c02f1d7d40d1aae964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638d9522b81161008c578063c47f002711610066578063c47f002714610201578063da8c229e14610214578063e0dba60f14610247578063f2fde38b1461025a57600080fd5b80638d9522b8146101bd5780638da5cb5b146101d0578063bffbe61c146101ee57600080fd5b80633f15457f116100c85780633f15457f1461013b5780634709bf4b14610180578063715018a614610193578063828eab0e1461019d57600080fd5b80630ccc4a7f146100ef5780630f5a5466146101155780631e83409a14610128575b600080fd5b6101026100fd366004611199565b61026d565b6040519081526020015b60405180910390f35b6101026101233660046111e4565b61041d565b61010261013636600461121d565b610431565b60025461015b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010c565b61010261018e3660046111e4565b610445565b61019b6105f0565b005b60035461015b9073ffffffffffffffffffffffffffffffffffffffff1681565b6101026101cb366004611314565b61067d565b60005473ffffffffffffffffffffffffffffffffffffffff1661015b565b6101026101fc36600461121d565b6109b7565b61010261020f366004611376565b610a12565b61023761022236600461121d565b60016020526000908152604090205460ff1681565b604051901515815260200161010c565b61019b6102553660046113b9565b610acf565b61019b61026836600461121d565b610bda565b60008373ffffffffffffffffffffffffffffffffffffffff81163314806102a357503360009081526001602052604090205460ff165b8061034357506002546040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301529091169063e985e9c590604401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034391906113e7565b80610352575061035281610d0a565b610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617560448201527f74686f72697365642062792061646472657373206f722074686520616464726560648201527f737320697473656c660000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b610414858585610dbb565b95945050505050565b600061042a338484610dbb565b9392505050565b600061043f33836000610dbb565b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff811633148061047b57503360009081526001602052604090205460ff165b8061051b57506002546040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301529091169063e985e9c590604401602060405180830381865afa1580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906113e7565b8061052a575061052a81610d0a565b6105dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617560448201527f74686f72697365642062792061646472657373206f722074686520616464726560648201527f737320697473656c660000000000000000000000000000000000000000000000608482015260a401610400565b6105e884846000610dbb565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b61067b6000611046565b565b60008373ffffffffffffffffffffffffffffffffffffffff81163314806106b357503360009081526001602052604090205460ff165b8061075357506002546040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301529091169063e985e9c590604401602060405180830381865afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075391906113e7565b80610762575061076281610d0a565b610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f7220617560448201527f74686f72697365642062792061646472657373206f722074686520616464726560648201527f737320697473656c660000000000000000000000000000000000000000000000608482015260a401610400565b60035460009061083d908790309073ffffffffffffffffffffffffffffffffffffffff16610dbb565b6003546040517f7737221300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff16906377372213906108969084908890600401611404565b600060405180830381600087803b1580156108b057600080fd5b505af11580156108c4573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506306ab592390507f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610912896110bb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff881660448201526064016020604051808303816000875af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad919061147f565b5095945050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26109e3836110bb565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b6003546000908190610a3d903390309073ffffffffffffffffffffffffffffffffffffffff16610dbb565b6003546040517f7737221300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff1690637737221390610a969084908790600401611404565b600060405180830381600087803b158015610ab057600080fd5b505af1158015610ac4573d6000803e3d6000fd5b509295945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b73ffffffffffffffffffffffffffffffffffffffff8116610cfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610400565b610d0781611046565b50565b60008173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d91575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610d8e91810190611498565b60015b610d9d57506000919050565b73ffffffffffffffffffffffffffffffffffffffff16331492915050565b600080610dc7856110bb565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26020820152908101829052909150600090606001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206002547f0178b8bf0000000000000000000000000000000000000000000000000000000083526004830182905290925060009173ffffffffffffffffffffffffffffffffffffffff90911690630178b8bf90602401602060405180830381865afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecd9190611498565b9050600073ffffffffffffffffffffffffffffffffffffffff861615801590610f2257508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b9050600081610f315782610f33565b865b6002546040517f5ef2c7f00000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526024810188905273ffffffffffffffffffffffffffffffffffffffff8b81166044830152808416606483015260006084830152929350911690635ef2c7f09060a401600060405180830381600087803b158015610fde57600080fd5b505af1158015610ff2573d6000803e3d6000fd5b505060405186925073ffffffffffffffffffffffffffffffffffffffff8c1691507f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a35091979650505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060285b801561116b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010909204917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506110c0565b50506028600020919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d0757600080fd5b6000806000606084860312156111ae57600080fd5b83356111b981611177565b925060208401356111c981611177565b915060408401356111d981611177565b809150509250925092565b600080604083850312156111f757600080fd5b823561120281611177565b9150602083013561121281611177565b809150509250929050565b60006020828403121561122f57600080fd5b813561042a81611177565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261127a57600080fd5b813567ffffffffffffffff808211156112955761129561123a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156112db576112db61123a565b816040528381528660208588010111156112f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561132957600080fd5b833561133481611177565b9250602084013561134481611177565b9150604084013567ffffffffffffffff81111561136057600080fd5b61136c86828701611269565b9150509250925092565b60006020828403121561138857600080fd5b813567ffffffffffffffff81111561139f57600080fd5b6105e884828501611269565b8015158114610d0757600080fd5b600080604083850312156113cc57600080fd5b82356113d781611177565b91506020830135611212816113ab565b6000602082840312156113f957600080fd5b815161042a816113ab565b82815260006020604081840152835180604085015260005b818110156114385785810183015185820160600152820161141c565b8181111561144a576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b60006020828403121561149157600080fd5b5051919050565b6000602082840312156114aa57600080fd5b815161042a8161117756fea2646970667358221220cdb80b58bafc55188af16e232c215fe9e7c85168899d8290c02f1d7d40d1aae964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "details": "Transfers ownership of the reverse ENS record associated with the      calling account.",
        "params": {
          "owner": "The address to set as the owner of the reverse record in ENS."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "claimForAddr(address,address)": {
        "details": "Transfers ownership of the reverse ENS record associated with the      calling account.",
        "params": {
          "addr": "The reverse record to set",
          "owner": "The address to set as the owner of the reverse record in ENS."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "claimWithResolver(address,address)": {
        "details": "Transfers ownership of the reverse ENS record associated with the      calling account.",
        "params": {
          "owner": "The address to set as the owner of the reverse record in ENS.",
          "resolver": "The address of the resolver to set; 0 to leave unchanged."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "claimWithResolverForAddr(address,address,address)": {
        "details": "Transfers ownership of the reverse ENS record specified with the      address provided",
        "params": {
          "addr": "The reverse record to set",
          "owner": "The address to set as the owner of the reverse record in ENS.",
          "resolver": "The address of the resolver to set; 0 to leave unchanged."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "ensAddr": "The address of the ENS registry.",
          "resolverAddr": "The address of the default reverse resolver."
        }
      },
      "node(address)": {
        "details": "Returns the node hash for a given account's reverse records.",
        "params": {
          "addr": "The address to hash"
        },
        "returns": {
          "_0": "The ENS node hash."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setName(string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.",
        "params": {
          "name": "The name to set for this address."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddr(address,address,string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the account provided. First updates the resolver to the default reverse resolver if necessary. Only callable by controllers and authorised users",
        "params": {
          "addr": "The reverse record to set",
          "name": "The name to set for this address.",
          "owner": "The owner of the reverse node"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/registry/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16055,
        "contract": "contracts/registry/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13400,
        "contract": "contracts/registry/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "ens",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ENS)12731"
      },
      {
        "astId": 13403,
        "contract": "contracts/registry/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "defaultResolver",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(NameResolver)13387"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ENS)12731": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(NameResolver)13387": {
        "encoding": "inplace",
        "label": "contract NameResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}