{
  "address": "0xb11d9E62765a4B5c534De51f5ee57cfD71DB372B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_anchors",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AlgorithmUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "DigestUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Marker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "NSEC3DigestUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "rrset",
          "type": "bytes"
        }
      ],
      "name": "RRSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "Test",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "algorithms",
      "outputs": [
        {
          "internalType": "contract Algorithm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anchors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "deleteType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "deleteName",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature",
          "name": "nsec",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "deleteRRSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "deleteType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "deleteName",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature",
          "name": "closestEncloser",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature",
          "name": "nextClosest",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "dnskey",
          "type": "bytes"
        }
      ],
      "name": "deleteRRSetNSEC3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "digests",
      "outputs": [
        {
          "internalType": "contract Digest",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "nsec3Digests",
      "outputs": [
        {
          "internalType": "contract NSEC3Digest",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dnstype",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "rrdata",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes20",
          "name": "",
          "type": "bytes20"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "contract Algorithm",
          "name": "algo",
          "type": "address"
        }
      ],
      "name": "setAlgorithm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "contract Digest",
          "name": "digest",
          "type": "address"
        }
      ],
      "name": "setDigest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "contract NSEC3Digest",
          "name": "digest",
          "type": "address"
        }
      ],
      "name": "setNSEC3Digest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature",
          "name": "input",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "submitRRSet",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature[]",
          "name": "input",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "submitRRSets",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe405236270c486e48be5aafcba3bee6773faf487c6f72bb21a8ae1bbfd245d6a",
  "receipt": {
    "to": null,
    "from": "0xC245F4C15dFD45fc3Af4E8F932E05beB4F0a1Fc0",
    "contractAddress": "0xb11d9E62765a4B5c534De51f5ee57cfD71DB372B",
    "transactionIndex": 1,
    "gasUsed": "3837401",
    "logsBloom": "0x
    "blockHash": "0x8f023649dca354da6082611a455d97da0026caeeab887e5b57aeed2a62059a98",
    "transactionHash": "0xe405236270c486e48be5aafcba3bee6773faf487c6f72bb21a8ae1bbfd245d6a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 48319373,
        "transactionHash": "0xe405236270c486e48be5aafcba3bee6773faf487c6f72bb21a8ae1bbfd245d6a",
        "address": "0xb11d9E62765a4B5c534De51f5ee57cfD71DB372B",
        "topics": [
          "0x55ced933cdd5a34dd03eb5d4bef19ec6ebb251dcd7a988eee0c1b9a13baaa88b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e00002b000100000e1000244a5c080249aac11d7b6f6446702e54a1607371607a1a41855200fd2ce1cdde32f24e8fb500002b000100000e1000244f660802e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d0000",
        "logIndex": 1,
        "blockHash": "0xbce485f680ecc8fa04f8fee5156b5f1963f7808bc97d0f8443d5fcecef78bfc1"
      }
    ],
    "blockNumber": 48319373,
    "cumulativeGasUsed": "3837401",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00002b000100000e1000244a5c080249aac11d7b6f6446702e54a1607371607a1a41855200fd2ce1cdde32f24e8fb500002b000100000e1000244f660802e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d"
  ],
  "solcInputHash": "94e956c652e5891a9bad5efc6519a27d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_anchors\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AlgorithmUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DigestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Marker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NSEC3DigestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"}],\"name\":\"RRSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"Test\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"algorithms\",\"outputs\":[{\"internalType\":\"contract Algorithm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"deleteType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"deleteName\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature\",\"name\":\"nsec\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"deleteRRSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"deleteType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"deleteName\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature\",\"name\":\"closestEncloser\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature\",\"name\":\"nextClosest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dnskey\",\"type\":\"bytes\"}],\"name\":\"deleteRRSetNSEC3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"digests\",\"outputs\":[{\"internalType\":\"contract Digest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nsec3Digests\",\"outputs\":[{\"internalType\":\"contract NSEC3Digest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dnstype\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"rrdata\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"contract Algorithm\",\"name\":\"algo\",\"type\":\"address\"}],\"name\":\"setAlgorithm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"contract Digest\",\"name\":\"digest\",\"type\":\"address\"}],\"name\":\"setDigest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"contract NSEC3Digest\",\"name\":\"digest\",\"type\":\"address\"}],\"name\":\"setNSEC3Digest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature\",\"name\":\"input\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"submitRRSet\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature[]\",\"name\":\"input\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"submitRRSets\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_anchors\":\"The binary format RR entries for the root DS records.\"}},\"deleteRRSet(uint16,bytes,(bytes,bytes),bytes)\":{\"details\":\"Deletes an RR from the oracle.\",\"params\":{\"deleteName\":\"which you want to delete\",\"deleteType\":\"The DNS record type to delete.\",\"nsec\":\"The signed NSEC RRset. This is in the format described in section        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature        data, followed by a series of canonicalised RR records that the signature        applies to.\"}},\"deleteRRSetNSEC3(uint16,bytes,(bytes,bytes),(bytes,bytes),bytes)\":{\"details\":\"Deletes an RR from the oracle using an NSEC3 proof.      Deleting a record using NSEC3 requires using up to two NSEC3 records. There are two cases:       1. The name exists, but the record type doesn't. Eg, example.com has A records but no TXT records.       2. The name does not exist, but a parent name does.      In the first case, we submit one NSEC3 proof in `closestEncloser` that matches the target name      but does not have the bit for `deleteType` set in its type bitmap. In the second case, we submit      two proofs: closestEncloser and nextClosest, that together prove that the name does not exist.      NSEC3 records are in the format described in section 5.3.2 of RFC4035: The RRDATA section      from the RRSIG without the signature data, followed by a series of canonicalised RR records      that the signature applies to.\",\"params\":{\"closestEncloser\":\"An NSEC3 proof matching the closest enclosing name - that is,        the nearest ancestor of the target name that *does* exist.\",\"deleteName\":\"The name to delete.\",\"deleteType\":\"The DNS record type to delete.\",\"dnskey\":\"An encoded DNSKEY record that has already been submitted to the oracle and can be used        to verify the signatures closestEncloserSig and nextClosestSig\",\"nextClosest\":\"An NSEC3 proof covering the next closest name. This proves that the immediate        subdomain of the closestEncloser does not exist.\"}},\"rrdata(uint16,bytes)\":{\"details\":\"Returns data about the RRs (if any) known to this oracle with the provided type and name.\",\"params\":{\"dnstype\":\"The DNS record type to query.\",\"name\":\"The name to query, in DNS label-sequence format.\"},\"returns\":{\"_0\":\"inception The unix timestamp (wrapped) at which the signature for this RRSET was created.\",\"_1\":\"expiration The unix timestamp (wrapped) at which the signature for this RRSET expires.\",\"_2\":\"hash The hash of the RRset.\"}},\"setAlgorithm(uint8,address)\":{\"details\":\"Sets the contract address for a signature verification algorithm.      Callable only by the owner.\",\"params\":{\"algo\":\"The address of the algorithm contract.\",\"id\":\"The algorithm ID\"}},\"setDigest(uint8,address)\":{\"details\":\"Sets the contract address for a digest verification algorithm.      Callable only by the owner.\",\"params\":{\"digest\":\"The address of the digest contract.\",\"id\":\"The digest ID\"}},\"setNSEC3Digest(uint8,address)\":{\"details\":\"Sets the contract address for an NSEC3 digest algorithm.      Callable only by the owner.\",\"params\":{\"digest\":\"The address of the digest contract.\",\"id\":\"The digest ID\"}},\"submitRRSet((bytes,bytes),bytes)\":{\"details\":\"Submits a signed set of RRs to the oracle. RRSETs are only accepted if they are signed with a key that is already trusted, or if they are self-signed, and the signing key is identified by a DS record that is already trusted.\",\"params\":{\"input\":\"The signed RR set. This is in the format described in section        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature        data, followed by a series of canonicalised RR records that the signature        applies to.\",\"proof\":\"The DNSKEY or DS to validate the signature against. Must Already        have been submitted and proved previously.\"}},\"submitRRSets((bytes,bytes)[],bytes)\":{\"details\":\"Submits multiple RRSets\",\"params\":{\"_proof\":\"The DNSKEY or DS to validate the first signature against.\",\"input\":\"A list of RRSets and signatures forming a chain of trust from an existing known-good record.\"},\"returns\":{\"_0\":\"The last RRSET submitted.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnssec-oracle/DNSSECImpl.sol\":\"DNSSECImpl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint a, uint b) private pure returns(uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The start offset to write to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write the byte at.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n    * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write at.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write at.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n    * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write at.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (right-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x18e42be1a3e4f7b4442d7ab0b524af5e09163503439954faf0ab3792cce91caa\"},\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    /*\\n    * @dev Returns the keccak-256 hash of a byte range.\\n    * @param self The byte string to hash.\\n    * @param offset The position to start hashing at.\\n    * @param len The number of bytes to hash.\\n    * @return The hash of the byte range.\\n    */\\n    function keccak(bytes memory self, uint offset, uint len) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n\\n    /*\\n    * @dev Returns a positive number if `other` comes lexicographically after\\n    *      `self`, a negative number if it comes before, or zero if the\\n    *      contents of the two bytes are equal.\\n    * @param self The first bytes to compare.\\n    * @param other The second bytes to compare.\\n    * @return The result of the comparison.\\n    */\\n    function compare(bytes memory self, bytes memory other) internal pure returns (int) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n    * @dev Returns a positive number if `other` comes lexicographically after\\n    *      `self`, a negative number if it comes before, or zero if the\\n    *      contents of the two bytes are equal. Comparison is done per-rune,\\n    *      on unicode codepoints.\\n    * @param self The first bytes to compare.\\n    * @param offset The offset of self.\\n    * @param len    The length of self.\\n    * @param other The second bytes to compare.\\n    * @param otheroffset The offset of the other string.\\n    * @param otherlen    The length of the other string.\\n    * @return The result of the comparison.\\n    */\\n    function compare(bytes memory self, uint offset, uint len, bytes memory other, uint otheroffset, uint otherlen) internal pure returns (int) {\\n        uint shortest = len;\\n        if (otherlen < len)\\n        shortest = otherlen;\\n\\n        uint selfptr;\\n        uint otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\n            uint a;\\n            uint b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint mask;\\n                if (shortest > 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\n                }\\n                int diff = int(a & mask) - int(b & mask);\\n                if (diff != 0)\\n                return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int(len) - int(otherlen);\\n    }\\n\\n    /*\\n    * @dev Returns true if the two byte ranges are equal.\\n    * @param self The first byte range to compare.\\n    * @param offset The offset into the first byte range.\\n    * @param other The second byte range to compare.\\n    * @param otherOffset The offset into the second byte range.\\n    * @param len The number of bytes to compare\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, uint offset, bytes memory other, uint otherOffset, uint len) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n    * @dev Returns true if the two byte ranges are equal with offsets.\\n    * @param self The first byte range to compare.\\n    * @param offset The offset into the first byte range.\\n    * @param other The second byte range to compare.\\n    * @param otherOffset The offset into the second byte range.\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, uint offset, bytes memory other, uint otherOffset) internal pure returns (bool) {\\n        return keccak(self, offset, self.length - offset) == keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n    * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n    *      they are equal.\\n    * @param self The first byte range to compare.\\n    * @param offset The offset into the first byte range.\\n    * @param other The second byte range to compare.\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, uint offset, bytes memory other) internal pure returns (bool) {\\n        return self.length >= offset + other.length && equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n    * @dev Returns true if the two byte ranges are equal.\\n    * @param self The first byte range to compare.\\n    * @param other The second byte range to compare.\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, bytes memory other) internal pure returns(bool) {\\n        return self.length == other.length && equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n    * @dev Returns the 8-bit number at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 8 bits of the string, interpreted as an integer.\\n    */\\n    function readUint8(bytes memory self, uint idx) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n    * @dev Returns the 16-bit number at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 16 bits of the string, interpreted as an integer.\\n    */\\n    function readUint16(bytes memory self, uint idx) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the 32-bit number at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 32 bits of the string, interpreted as an integer.\\n    */\\n    function readUint32(bytes memory self, uint idx) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the 32 byte value at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 32 bytes of the string.\\n    */\\n    function readBytes32(bytes memory self, uint idx) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the 32 byte value at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 32 bytes of the string.\\n    */\\n    function readBytes20(bytes memory self, uint idx) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 32), idx)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the n byte value at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes.\\n    * @param len The number of bytes.\\n    * @return The specified 32 bytes of the string.\\n    */\\n    function readBytesN(bytes memory self, uint idx, uint len) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)),  mask)\\n        }\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n    * @dev Copies a substring into a new byte string.\\n    * @param self The byte string to copy from.\\n    * @param offset The offset to start copying at.\\n    * @param len The number of bytes to copy.\\n    */\\n    function substring(bytes memory self, uint offset, uint len) internal pure returns(bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint dest;\\n        uint src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(bytes memory self, uint off, uint len) internal pure returns(bytes32) {\\n        require(len <= 52);\\n\\n        uint ret = 0;\\n        uint8 decoded;\\n        for(uint i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if(i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint bitlen = len * 5;\\n        if(len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if(len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if(len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if(len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if(len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n}\",\"keccak256\":\"0x83315df2e54c74451577c70da2c267c3459802b08b9aeec6516302eee70f796e\"},\"contracts/dnssec-oracle/DNSSEC.sol\":{\"content\":\"pragma solidity ^0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract DNSSEC {\\n\\n    bytes public anchors;\\n\\n    struct RRSetWithSignature {\\n        bytes rrset;\\n        bytes sig;\\n    }\\n\\n    event AlgorithmUpdated(uint8 id, address addr);\\n    event DigestUpdated(uint8 id, address addr);\\n    event NSEC3DigestUpdated(uint8 id, address addr);\\n    event RRSetUpdated(bytes name, bytes rrset);\\n\\n    function submitRRSets(RRSetWithSignature[] memory input, bytes calldata proof) public virtual returns (bytes memory);\\n    function submitRRSet(RRSetWithSignature calldata input, bytes calldata proof) public virtual returns (bytes memory);\\n    function deleteRRSet(uint16 deleteType, bytes calldata deleteName, RRSetWithSignature calldata nsec, bytes calldata proof) public virtual;\\n    function deleteRRSetNSEC3(uint16 deleteType, bytes memory deleteName, RRSetWithSignature memory closestEncloser, RRSetWithSignature memory nextClosest, bytes memory dnskey) public virtual;\\n    function rrdata(uint16 dnstype, bytes calldata name) external virtual view returns (uint32, uint32, bytes20);\\n}\\n\",\"keccak256\":\"0x5b8d2391f66e878e09aa88a97fe8ea5b26604a0c0ad9247feb6124db9817f6c1\"},\"contracts/dnssec-oracle/DNSSECImpl.sol\":{\"content\":\"pragma solidity ^0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./BytesUtils.sol\\\";\\nimport \\\"./RRUtils.sol\\\";\\nimport \\\"./DNSSEC.sol\\\";\\nimport \\\"./algorithms/Algorithm.sol\\\";\\nimport \\\"./digests/Digest.sol\\\";\\nimport \\\"./nsec3digests/NSEC3Digest.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/*\\n * @dev An oracle contract that verifies and stores DNSSEC-validated DNS records.\\n *\\n * TODO: Support for NSEC3 records\\n */\\ncontract DNSSECImpl is DNSSEC, Owned {\\n    using Buffer for Buffer.buffer;\\n    using BytesUtils for bytes;\\n    using RRUtils for *;\\n\\n    uint16 constant DNSCLASS_IN = 1;\\n\\n    uint16 constant DNSTYPE_NS = 2;\\n    uint16 constant DNSTYPE_SOA = 6;\\n    uint16 constant DNSTYPE_DNAME = 39;\\n    uint16 constant DNSTYPE_DS = 43;\\n    uint16 constant DNSTYPE_RRSIG = 46;\\n    uint16 constant DNSTYPE_NSEC = 47;\\n    uint16 constant DNSTYPE_DNSKEY = 48;\\n    uint16 constant DNSTYPE_NSEC3 = 50;\\n\\n    uint constant DNSKEY_FLAG_ZONEKEY = 0x100;\\n\\n    uint8 constant ALGORITHM_RSASHA256 = 8;\\n\\n    uint8 constant DIGEST_ALGORITHM_SHA256 = 2;\\n\\n    struct RRSet {\\n        uint32 inception;\\n        uint32 expiration;\\n        bytes20 hash;\\n    }\\n\\n    // (name, type) => RRSet\\n    mapping (bytes32 => mapping(uint16 => RRSet)) rrsets;\\n\\n    mapping (uint8 => Algorithm) public algorithms;\\n    mapping (uint8 => Digest) public digests;\\n    mapping (uint8 => NSEC3Digest) public nsec3Digests;\\n\\n    event Test(uint t);\\n    event Marker();\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _anchors The binary format RR entries for the root DS records.\\n     */\\n    constructor(bytes memory _anchors) {\\n        // Insert the 'trust anchors' - the key hashes that start the chain\\n        // of trust for all other records.\\n        anchors = _anchors;\\n        rrsets[keccak256(hex\\\"00\\\")][DNSTYPE_DS] = RRSet({\\n            inception: uint32(0),\\n            expiration: uint32(3767581600), // May 22 2089 - the latest date we can encode as of writing this\\n            hash: bytes20(keccak256(anchors))\\n        });\\n        emit RRSetUpdated(hex\\\"00\\\", anchors);\\n    }\\n\\n    /**\\n     * @dev Sets the contract address for a signature verification algorithm.\\n     *      Callable only by the owner.\\n     * @param id The algorithm ID\\n     * @param algo The address of the algorithm contract.\\n     */\\n    function setAlgorithm(uint8 id, Algorithm algo) public owner_only {\\n        algorithms[id] = algo;\\n        emit AlgorithmUpdated(id, address(algo));\\n    }\\n\\n    /**\\n     * @dev Sets the contract address for a digest verification algorithm.\\n     *      Callable only by the owner.\\n     * @param id The digest ID\\n     * @param digest The address of the digest contract.\\n     */\\n    function setDigest(uint8 id, Digest digest) public owner_only {\\n        digests[id] = digest;\\n        emit DigestUpdated(id, address(digest));\\n    }\\n\\n    /**\\n     * @dev Sets the contract address for an NSEC3 digest algorithm.\\n     *      Callable only by the owner.\\n     * @param id The digest ID\\n     * @param digest The address of the digest contract.\\n     */\\n    function setNSEC3Digest(uint8 id, NSEC3Digest digest) public owner_only {\\n        nsec3Digests[id] = digest;\\n        emit NSEC3DigestUpdated(id, address(digest));\\n    }\\n\\n    /**\\n     * @dev Submits multiple RRSets\\n     * @param input A list of RRSets and signatures forming a chain of trust from an existing known-good record.\\n     * @param _proof The DNSKEY or DS to validate the first signature against.\\n     * @return The last RRSET submitted.\\n     */\\n    function submitRRSets(RRSetWithSignature[] memory input, bytes calldata _proof) public override returns (bytes memory) {\\n        bytes memory proof = _proof;\\n        for(uint i = 0; i < input.length; i++) {\\n            proof = _submitRRSet(input[i], proof);\\n        }\\n        return proof;\\n    }\\n\\n    /**\\n     * @dev Submits a signed set of RRs to the oracle.\\n     *\\n     * RRSETs are only accepted if they are signed with a key that is already\\n     * trusted, or if they are self-signed, and the signing key is identified by\\n     * a DS record that is already trusted.\\n     *\\n     * @param input The signed RR set. This is in the format described in section\\n     *        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature\\n     *        data, followed by a series of canonicalised RR records that the signature\\n     *        applies to.\\n     * @param proof The DNSKEY or DS to validate the signature against. Must Already\\n     *        have been submitted and proved previously.\\n     */\\n    function submitRRSet(RRSetWithSignature memory input, bytes memory proof)\\n        public override\\n        returns (bytes memory)\\n    {\\n        return _submitRRSet(input, proof);\\n    }\\n\\n    /**\\n     * @dev Deletes an RR from the oracle.\\n     *\\n     * @param deleteType The DNS record type to delete.\\n     * @param deleteName which you want to delete\\n     * @param nsec The signed NSEC RRset. This is in the format described in section\\n     *        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature\\n     *        data, followed by a series of canonicalised RR records that the signature\\n     *        applies to.\\n     */\\n    function deleteRRSet(uint16 deleteType, bytes memory deleteName, RRSetWithSignature memory nsec, bytes memory proof)\\n        public override\\n    {\\n        RRUtils.SignedSet memory rrset;\\n        rrset = validateSignedSet(nsec, proof);\\n        require(rrset.typeCovered == DNSTYPE_NSEC);\\n\\n        // Don't let someone use an old proof to delete a new name\\n        require(RRUtils.serialNumberGte(rrset.inception, rrsets[keccak256(deleteName)][deleteType].inception));\\n\\n        for (RRUtils.RRIterator memory iter = rrset.rrs(); !iter.done(); iter.next()) {\\n            // We're dealing with three names here:\\n            //   - deleteName is the name the user wants us to delete\\n            //   - nsecName is the owner name of the NSEC record\\n            //   - nextName is the next name specified in the NSEC record\\n            //\\n            // And three cases:\\n            //   - deleteName equals nsecName, in which case we can delete the\\n            //     record if it's not in the type bitmap.\\n            //   - nextName comes after nsecName, in which case we can delete\\n            //     the record if deleteName comes between nextName and nsecName.\\n            //   - nextName comes before nsecName, in which case nextName is the\\n            //     zone apex, and deleteName must come after nsecName.\\n            checkNsecName(iter, rrset.name, deleteName, deleteType);\\n            delete rrsets[keccak256(deleteName)][deleteType];\\n            return;\\n        }\\n        // We should never reach this point\\n        revert();\\n    }\\n\\n    function checkNsecName(RRUtils.RRIterator memory iter, bytes memory nsecName, bytes memory deleteName, uint16 deleteType) private pure {\\n        uint rdataOffset = iter.rdataOffset;\\n        uint nextNameLength = iter.data.nameLength(rdataOffset);\\n        uint rDataLength = iter.nextOffset - iter.rdataOffset;\\n\\n        // We assume that there is always typed bitmap after the next domain name\\n        require(rDataLength > nextNameLength);\\n\\n        int compareResult = deleteName.compareNames(nsecName);\\n        if(compareResult == 0) {\\n            // Name to delete is on the same label as the NSEC record\\n            require(!iter.data.checkTypeBitmap(rdataOffset + nextNameLength, deleteType));\\n        } else {\\n            // First check if the NSEC next name comes after the NSEC name.\\n            bytes memory nextName = iter.data.substring(rdataOffset,nextNameLength);\\n            // deleteName must come after nsecName\\n            require(compareResult > 0);\\n            if(nsecName.compareNames(nextName) < 0) {\\n                // deleteName must also come before nextName\\n                require(deleteName.compareNames(nextName) < 0);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deletes an RR from the oracle using an NSEC3 proof.\\n     *      Deleting a record using NSEC3 requires using up to two NSEC3 records. There are two cases:\\n     *       1. The name exists, but the record type doesn't. Eg, example.com has A records but no TXT records.\\n     *       2. The name does not exist, but a parent name does.\\n     *      In the first case, we submit one NSEC3 proof in `closestEncloser` that matches the target name\\n     *      but does not have the bit for `deleteType` set in its type bitmap. In the second case, we submit\\n     *      two proofs: closestEncloser and nextClosest, that together prove that the name does not exist.\\n     *      NSEC3 records are in the format described in section 5.3.2 of RFC4035: The RRDATA section\\n     *      from the RRSIG without the signature data, followed by a series of canonicalised RR records\\n     *      that the signature applies to.\\n     *\\n     * @param deleteType The DNS record type to delete.\\n     * @param deleteName The name to delete.\\n     * @param closestEncloser An NSEC3 proof matching the closest enclosing name - that is,\\n     *        the nearest ancestor of the target name that *does* exist.\\n     * @param nextClosest An NSEC3 proof covering the next closest name. This proves that the immediate\\n     *        subdomain of the closestEncloser does not exist.\\n     * @param dnskey An encoded DNSKEY record that has already been submitted to the oracle and can be used\\n     *        to verify the signatures closestEncloserSig and nextClosestSig\\n     */\\n    function deleteRRSetNSEC3(uint16 deleteType, bytes memory deleteName, RRSetWithSignature memory closestEncloser, RRSetWithSignature memory nextClosest, bytes memory dnskey)\\n        public override\\n    {\\n        uint32 originalInception = rrsets[keccak256(deleteName)][deleteType].inception;\\n\\n        RRUtils.SignedSet memory ce = validateSignedSet(closestEncloser, dnskey);\\n        checkNSEC3Validity(ce, deleteName, originalInception);\\n\\n        RRUtils.SignedSet memory nc;\\n        if(nextClosest.rrset.length > 0) {\\n            nc = validateSignedSet(nextClosest, dnskey);\\n            checkNSEC3Validity(nc, deleteName, originalInception);\\n        }\\n\\n        RRUtils.NSEC3 memory ceNSEC3 = readNSEC3(ce);\\n        // The flags field must be 0 or 1 (RFC5155 section 8.2).\\n        require(ceNSEC3.flags & 0xfe == 0);\\n        // Check that the closest encloser is from the correct zone (RFC5155 section 8.3)\\n        // \\\"The DNAME type bit must not be set and the NS type bit may only be set if the SOA type bit is set.\\\"\\n        require(!ceNSEC3.checkTypeBitmap(DNSTYPE_DNAME) && (!ceNSEC3.checkTypeBitmap(DNSTYPE_NS) || ceNSEC3.checkTypeBitmap(DNSTYPE_SOA)));\\n\\n        // Case 1: deleteName does exist, but no records of RRTYPE deleteType do.\\n        if(isMatchingNSEC3Record(deleteType, deleteName, ce.name, ceNSEC3)) {\\n            delete rrsets[keccak256(deleteName)][deleteType];\\n        // Case 2: deleteName does not exist.\\n        } else if(isCoveringNSEC3Record(deleteName, ce.name, ceNSEC3, nc.name, readNSEC3(nc))) {\\n            delete rrsets[keccak256(deleteName)][deleteType];\\n        } else {\\n            revert();\\n        }\\n    }\\n\\n    function checkNSEC3Validity(RRUtils.SignedSet memory nsec, bytes memory deleteName, uint32 originalInception) private pure {\\n        // The records must have been signed after the record we're trying to delete\\n        require(RRUtils.serialNumberGte(nsec.inception, originalInception));\\n\\n        // The record must be an NSEC3\\n        require(nsec.typeCovered == DNSTYPE_NSEC3);\\n\\n        // nsecName is of the form <hash>.zone.xyz. <hash> is the NSEC3 hash of the entire name the NSEC3 record matches, while\\n        // zone.xyz can be any ancestor of that name. We'll check that, so someone can't use a record on foo.com\\n        // as proof of the nonexistence of bar.org.\\n        require(checkNSEC3OwnerName(nsec.name, deleteName));\\n    }\\n\\n    function isMatchingNSEC3Record(uint16 deleteType, bytes memory deleteName, bytes memory closestEncloserName, RRUtils.NSEC3 memory closestEncloser) private view returns(bool) {\\n        // Check the record matches the hashed name, but the type bitmap does not include the type\\n        if(checkNSEC3Name(closestEncloser, closestEncloserName, deleteName)) {\\n            return !closestEncloser.checkTypeBitmap(deleteType);\\n        }\\n\\n        return false;\\n    }\\n\\n    function isCoveringNSEC3Record(bytes memory deleteName, bytes memory ceName, RRUtils.NSEC3 memory ce, bytes memory ncName, RRUtils.NSEC3 memory nc) private view returns(bool) {\\n        // The flags field must be 0 or 1 (RFC5155 section 8.2).\\n        require(nc.flags & 0xfe == 0);\\n\\n        bytes32 ceNameHash = decodeOwnerNameHash(ceName);\\n        bytes32 ncNameHash = decodeOwnerNameHash(ncName);\\n\\n        uint lastOffset = 0;\\n        // Iterate over suffixes of the name to delete until one matches the closest encloser\\n        for(uint offset = deleteName.readUint8(0) + 1; offset < deleteName.length; offset += deleteName.readUint8(offset) + 1) {\\n            if(hashName(ce, deleteName.substring(offset, deleteName.length - offset)) == ceNameHash) {\\n                // Check that the next closest record encloses the name one label longer\\n                bytes32 checkHash = hashName(nc, deleteName.substring(lastOffset, deleteName.length - lastOffset));\\n                if(ncNameHash < nc.nextHashedOwnerName) {\\n                    return checkHash > ncNameHash && checkHash < nc.nextHashedOwnerName;\\n                } else {\\n                    return checkHash > ncNameHash || checkHash < nc.nextHashedOwnerName;\\n                }\\n            }\\n            lastOffset = offset;\\n        }\\n        // If we reached the root without finding a match, return false.\\n        return false;\\n    }\\n\\n    function readNSEC3(RRUtils.SignedSet memory ss) private pure returns(RRUtils.NSEC3 memory) {\\n        RRUtils.RRIterator memory iter = ss.rrs();\\n        return iter.data.readNSEC3(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n    }\\n\\n    function checkNSEC3Name(RRUtils.NSEC3 memory nsec, bytes memory ownerName, bytes memory deleteName) private view returns(bool) {\\n        // Compute the NSEC3 name hash of the name to delete.\\n        bytes32 deleteNameHash = hashName(nsec, deleteName);\\n\\n        // Decode the NSEC3 name hash from the first label of the NSEC3 owner name.\\n        bytes32 nsecNameHash = decodeOwnerNameHash(ownerName);\\n\\n        return deleteNameHash == nsecNameHash;\\n    }\\n\\n    function hashName(RRUtils.NSEC3 memory nsec, bytes memory name) private view returns(bytes32) {\\n        return nsec3Digests[nsec.hashAlgorithm].hash(nsec.salt, name, nsec.iterations);\\n    }\\n\\n    function decodeOwnerNameHash(bytes memory name) private pure returns(bytes32) {\\n        return name.base32HexDecodeWord(1, uint(name.readUint8(0)));\\n    }\\n\\n    function checkNSEC3OwnerName(bytes memory nsecName, bytes memory deleteName) private pure returns(bool) {\\n        uint nsecNameOffset = nsecName.readUint8(0) + 1;\\n        uint deleteNameOffset = 0;\\n        while(deleteNameOffset < deleteName.length) {\\n            if(deleteName.equals(deleteNameOffset, nsecName, nsecNameOffset)) {\\n                return true;\\n            }\\n            deleteNameOffset += deleteName.readUint8(deleteNameOffset) + 1;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns data about the RRs (if any) known to this oracle with the provided type and name.\\n     * @param dnstype The DNS record type to query.\\n     * @param name The name to query, in DNS label-sequence format.\\n     * @return inception The unix timestamp (wrapped) at which the signature for this RRSET was created.\\n     * @return expiration The unix timestamp (wrapped) at which the signature for this RRSET expires.\\n     * @return hash The hash of the RRset.\\n     */\\n    function rrdata(uint16 dnstype, bytes calldata name) external override view returns (uint32, uint32, bytes20) {\\n        RRSet storage result = rrsets[keccak256(name)][dnstype];\\n        return (result.inception, result.expiration, result.hash);\\n    }\\n\\n    function _submitRRSet(RRSetWithSignature memory input, bytes memory proof) internal returns (bytes memory) {\\n        RRUtils.SignedSet memory rrset;\\n        rrset = validateSignedSet(input, proof);\\n\\n        RRSet storage storedSet = rrsets[keccak256(rrset.name)][rrset.typeCovered];\\n        if (storedSet.hash != bytes20(0)) {\\n            // To replace an existing rrset, the signature must be at least as new\\n            require(RRUtils.serialNumberGte(rrset.inception, storedSet.inception));\\n        }\\n        rrsets[keccak256(rrset.name)][rrset.typeCovered] = RRSet({\\n            inception: rrset.inception,\\n            expiration: rrset.expiration,\\n            hash: bytes20(keccak256(rrset.data))\\n        });\\n\\n        emit RRSetUpdated(rrset.name, rrset.data);\\n\\n        return rrset.data;\\n    }\\n\\n    /**\\n     * @dev Submits a signed set of RRs to the oracle.\\n     *\\n     * RRSETs are only accepted if they are signed with a key that is already\\n     * trusted, or if they are self-signed, and the signing key is identified by\\n     * a DS record that is already trusted.\\n     *\\n     * @param input The signed RR set. This is in the format described in section\\n     *        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature\\n     *        data, followed by a series of canonicalised RR records that the signature\\n     *        applies to.\\n     * @param proof The DNSKEY or DS to validate the signature against. Must Already\\n     *        have been submitted and proved previously.\\n     */\\n    function validateSignedSet(RRSetWithSignature memory input, bytes memory proof) internal view returns(RRUtils.SignedSet memory rrset) {\\n        rrset = input.rrset.readSignedSet();\\n        require(validProof(rrset.signerName, proof));\\n\\n        // Do some basic checks on the RRs and extract the name\\n        bytes memory name = validateRRs(rrset, rrset.typeCovered);\\n        require(name.labelCount(0) == rrset.labels);\\n        rrset.name = name;\\n\\n        // All comparisons involving the Signature Expiration and\\n        // Inception fields MUST use \\\"serial number arithmetic\\\", as\\n        // defined in RFC 1982\\n\\n        // o  The validator's notion of the current time MUST be less than or\\n        //    equal to the time listed in the RRSIG RR's Expiration field.\\n        require(RRUtils.serialNumberGte(rrset.expiration, uint32(block.timestamp)));\\n\\n        // o  The validator's notion of the current time MUST be greater than or\\n        //    equal to the time listed in the RRSIG RR's Inception field.\\n        require(RRUtils.serialNumberGte(uint32(block.timestamp), rrset.inception));\\n\\n        // Validate the signature\\n        verifySignature(name, rrset, input, proof);\\n\\n        return rrset;\\n    }\\n\\n    function validProof(bytes memory name, bytes memory proof) internal view returns(bool) {\\n        uint16 dnstype = proof.readUint16(proof.nameLength(0));\\n        return rrsets[keccak256(name)][dnstype].hash == bytes20(keccak256(proof));\\n    }\\n\\n    /**\\n     * @dev Validates a set of RRs.\\n     * @param rrset The RR set.\\n     * @param typecovered The type covered by the RRSIG record.\\n     */\\n    function validateRRs(RRUtils.SignedSet memory rrset, uint16 typecovered) internal pure returns (bytes memory name) {\\n        // Iterate over all the RRs\\n        for (RRUtils.RRIterator memory iter = rrset.rrs(); !iter.done(); iter.next()) {\\n            // We only support class IN (Internet)\\n            require(iter.class == DNSCLASS_IN);\\n\\n            if(name.length == 0) {\\n                name = iter.name();\\n            } else {\\n                // Name must be the same on all RRs. We do things this way to avoid copying the name\\n                // repeatedly.\\n                require(name.length == iter.data.nameLength(iter.offset));\\n                require(name.equals(0, iter.data, iter.offset, name.length));\\n            }\\n\\n            // o  The RRSIG RR's Type Covered field MUST equal the RRset's type.\\n            require(iter.dnstype == typecovered);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs signature verification.\\n     *\\n     * Throws or reverts if unable to verify the record.\\n     *\\n     * @param name The name of the RRSIG record, in DNS label-sequence format.\\n     * @param data The original data to verify.\\n     * @param proof A DS or DNSKEY record that's already verified by the oracle.\\n     */\\n    function verifySignature(bytes memory name, RRUtils.SignedSet memory rrset, RRSetWithSignature memory data, bytes memory proof) internal view {\\n        // o  The RRSIG RR's Signer's Name field MUST be the name of the zone\\n        //    that contains the RRset.\\n        require(rrset.signerName.length <= name.length);\\n        require(rrset.signerName.equals(0, name, name.length - rrset.signerName.length));\\n\\n        RRUtils.RRIterator memory proofRR = proof.iterateRRs(0);\\n        // Check the proof\\n        if (proofRR.dnstype == DNSTYPE_DS) {\\n            require(verifyWithDS(rrset, data, proofRR));\\n        } else if (proofRR.dnstype == DNSTYPE_DNSKEY) {\\n            require(verifyWithKnownKey(rrset, data, proofRR));\\n        } else {\\n            revert(\\\"No valid proof found\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to verify a signed RRSET against an already known public key.\\n     * @param rrset The signed set to verify.\\n     * @param data The original data the signed set was read from.\\n     * @param proof The serialized DS or DNSKEY record to use as proof.\\n     * @return True if the RRSET could be verified, false otherwise.\\n     */\\n    function verifyWithKnownKey(RRUtils.SignedSet memory rrset, RRSetWithSignature memory data, RRUtils.RRIterator memory proof) internal view returns(bool) {\\n        // Check the DNSKEY's owner name matches the signer name on the RRSIG\\n        require(proof.name().equals(rrset.signerName));\\n        for(; !proof.done(); proof.next()) {\\n            require(proof.name().equals(rrset.signerName));\\n            bytes memory keyrdata = proof.rdata();\\n            RRUtils.DNSKEY memory dnskey = keyrdata.readDNSKEY(0, keyrdata.length);\\n            if(verifySignatureWithKey(dnskey, keyrdata, rrset, data)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Attempts to verify some data using a provided key and a signature.\\n     * @param dnskey The dns key record to verify the signature with.\\n     * @param rrset The signed RRSET being verified.\\n     * @param data The original data `rrset` was decoded from.\\n     * @return True iff the key verifies the signature.\\n     */\\n    function verifySignatureWithKey(RRUtils.DNSKEY memory dnskey, bytes memory keyrdata, RRUtils.SignedSet memory rrset, RRSetWithSignature memory data)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // TODO: Check key isn't expired, unless updating key itself\\n\\n        // The Protocol Field MUST have value 3 (RFC4034 2.1.2)\\n        if(dnskey.protocol != 3) {\\n            return false;\\n        }\\n\\n        // o The RRSIG RR's Signer's Name, Algorithm, and Key Tag fields MUST\\n        //   match the owner name, algorithm, and key tag for some DNSKEY RR in\\n        //   the zone's apex DNSKEY RRset.\\n        if(dnskey.algorithm != rrset.algorithm) {\\n            return false;\\n        }\\n        uint16 computedkeytag = keyrdata.computeKeytag();\\n        if (computedkeytag != rrset.keytag) {\\n            return false;\\n        }\\n\\n        // o The matching DNSKEY RR MUST be present in the zone's apex DNSKEY\\n        //   RRset, and MUST have the Zone Flag bit (DNSKEY RDATA Flag bit 7)\\n        //   set.\\n        if (dnskey.flags & DNSKEY_FLAG_ZONEKEY == 0) {\\n            return false;\\n        }\\n\\n        return algorithms[dnskey.algorithm].verify(keyrdata, data.rrset, data.sig);\\n    }\\n\\n    /**\\n     * @dev Attempts to verify a signed RRSET against an already known hash. This function assumes\\n     *      that the record \\n     * @param rrset The signed set to verify.\\n     * @param data The original data the signed set was read from.\\n     * @param proof The serialized DS or DNSKEY record to use as proof.\\n     * @return True if the RRSET could be verified, false otherwise.\\n     */\\n    function verifyWithDS(RRUtils.SignedSet memory rrset, RRSetWithSignature memory data, RRUtils.RRIterator memory proof) internal view returns(bool) {\\n        for(RRUtils.RRIterator memory iter = rrset.rrs(); !iter.done(); iter.next()) {\\n            require(iter.dnstype == DNSTYPE_DNSKEY);\\n            bytes memory keyrdata = iter.rdata();\\n            RRUtils.DNSKEY memory dnskey = keyrdata.readDNSKEY(0, keyrdata.length);\\n            if (verifySignatureWithKey(dnskey, keyrdata, rrset, data)) {\\n                // It's self-signed - look for a DS record to verify it.\\n                return verifyKeyWithDS(iter.name(), proof, dnskey, keyrdata);\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Attempts to verify a key using DS records.\\n     * @param keyname The DNS name of the key, in DNS label-sequence format.\\n     * @param dsrrs The DS records to use in verification.\\n     * @param dnskey The dnskey to verify.\\n     * @param keyrdata The RDATA section of the key.\\n     * @return True if a DS record verifies this key.\\n     */\\n    function verifyKeyWithDS(bytes memory keyname, RRUtils.RRIterator memory dsrrs, RRUtils.DNSKEY memory dnskey, bytes memory keyrdata)\\n        internal view returns (bool)\\n    {\\n        uint16 keytag = keyrdata.computeKeytag();\\n        for (; !dsrrs.done(); dsrrs.next()) {\\n            RRUtils.DS memory ds = dsrrs.data.readDS(dsrrs.rdataOffset, dsrrs.nextOffset - dsrrs.rdataOffset);\\n            if(ds.keytag != keytag) {\\n                continue;\\n            }\\n            if (ds.algorithm != dnskey.algorithm) {\\n                continue;\\n            }\\n\\n            Buffer.buffer memory buf;\\n            buf.init(keyname.length + keyrdata.length);\\n            buf.append(keyname);\\n            buf.append(keyrdata);\\n            if (verifyDSHash(ds.digestType, buf.buf, ds.digest)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Attempts to verify a DS record's hash value against some data.\\n     * @param digesttype The digest ID from the DS record.\\n     * @param data The data to digest.\\n     * @param digest The digest data to check against.\\n     * @return True iff the digest matches.\\n     */\\n    function verifyDSHash(uint8 digesttype, bytes memory data, bytes memory digest) internal view returns (bool) {\\n        if (address(digests[digesttype]) == address(0)) {\\n            return false;\\n        }\\n        return digests[digesttype].verify(data, digest);\\n    }\\n}\\n\",\"keccak256\":\"0x347fdc38971b863831f00f0e5a8e791ace9dda1196da57fbf726a125c9d99a04\"},\"contracts/dnssec-oracle/Owned.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n* @dev Contract mixin for 'owned' contracts.\\n*/\\ncontract Owned {\\n    address public owner;\\n    \\n    modifier owner_only() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setOwner(address newOwner) public owner_only {\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x14ca1cbae3a361b9d868147498af8bdea7e7d5b0829e207fb7719f607cce5ab3\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"./BytesUtils.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n*/\\nlibrary RRUtils {\\n    using BytesUtils for *;\\n    using Buffer for *;\\n\\n    /**\\n    * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n    * @param self The byte array to read a name from.\\n    * @param offset The offset to start reading at.\\n    * @return The length of the DNS name at 'offset', in bytes.\\n    */\\n    function nameLength(bytes memory self, uint offset) internal pure returns(uint) {\\n        uint idx = offset;\\n        while (true) {\\n            assert(idx < self.length);\\n            uint labelLen = self.readUint8(idx);\\n            idx += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n        }\\n        return idx - offset;\\n    }\\n\\n    /**\\n    * @dev Returns a DNS format name at the specified offset of self.\\n    * @param self The byte array to read a name from.\\n    * @param offset The offset to start reading at.\\n    * @return ret The name.\\n    */\\n    function readName(bytes memory self, uint offset) internal pure returns(bytes memory ret) {\\n        uint len = nameLength(self, offset);\\n        return self.substring(offset, len);\\n    }\\n\\n    /**\\n    * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n    * @param self The byte array to read a name from.\\n    * @param offset The offset to start reading at.\\n    * @return The number of labels in the DNS name at 'offset', in bytes.\\n    */\\n    function labelCount(bytes memory self, uint offset) internal pure returns(uint) {\\n        uint count = 0;\\n        while (true) {\\n            assert(offset < self.length);\\n            uint labelLen = self.readUint8(offset);\\n            offset += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n            count += 1;\\n        }\\n        return count;\\n    }\\n\\n    uint constant RRSIG_TYPE = 0;\\n    uint constant RRSIG_ALGORITHM = 2;\\n    uint constant RRSIG_LABELS = 3;\\n    uint constant RRSIG_TTL = 4;\\n    uint constant RRSIG_EXPIRATION = 8;\\n    uint constant RRSIG_INCEPTION = 12;\\n    uint constant RRSIG_KEY_TAG = 16;\\n    uint constant RRSIG_SIGNER_NAME = 18;\\n\\n    struct SignedSet {\\n        uint16 typeCovered;\\n        uint8 algorithm;\\n        uint8 labels;\\n        uint32 ttl;\\n        uint32 expiration;\\n        uint32 inception;\\n        uint16 keytag;\\n        bytes signerName;\\n        bytes data;\\n        bytes name;\\n    }\\n\\n    function readSignedSet(bytes memory data) internal pure returns(SignedSet memory self) {\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\n        self.labels = data.readUint8(RRSIG_LABELS);\\n        self.ttl = data.readUint32(RRSIG_TTL);\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\n        self.data = data.substring(RRSIG_SIGNER_NAME + self.signerName.length, data.length - RRSIG_SIGNER_NAME - self.signerName.length);\\n    }\\n\\n    function rrs(SignedSet memory rrset) internal pure returns(RRIterator memory) {\\n        return iterateRRs(rrset.data, 0);\\n    }\\n\\n    /**\\n    * @dev An iterator over resource records.\\n    */\\n    struct RRIterator {\\n        bytes data;\\n        uint offset;\\n        uint16 dnstype;\\n        uint16 class;\\n        uint32 ttl;\\n        uint rdataOffset;\\n        uint nextOffset;\\n    }\\n\\n    /**\\n    * @dev Begins iterating over resource records.\\n    * @param self The byte string to read from.\\n    * @param offset The offset to start reading at.\\n    * @return ret An iterator object.\\n    */\\n    function iterateRRs(bytes memory self, uint offset) internal pure returns (RRIterator memory ret) {\\n        ret.data = self;\\n        ret.nextOffset = offset;\\n        next(ret);\\n    }\\n\\n    /**\\n    * @dev Returns true iff there are more RRs to iterate.\\n    * @param iter The iterator to check.\\n    * @return True iff the iterator has finished.\\n    */\\n    function done(RRIterator memory iter) internal pure returns(bool) {\\n        return iter.offset >= iter.data.length;\\n    }\\n\\n    /**\\n    * @dev Moves the iterator to the next resource record.\\n    * @param iter The iterator to advance.\\n    */\\n    function next(RRIterator memory iter) internal pure {\\n        iter.offset = iter.nextOffset;\\n        if (iter.offset >= iter.data.length) {\\n            return;\\n        }\\n\\n        // Skip the name\\n        uint off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n        // Read type, class, and ttl\\n        iter.dnstype = iter.data.readUint16(off);\\n        off += 2;\\n        iter.class = iter.data.readUint16(off);\\n        off += 2;\\n        iter.ttl = iter.data.readUint32(off);\\n        off += 4;\\n\\n        // Read the rdata\\n        uint rdataLength = iter.data.readUint16(off);\\n        off += 2;\\n        iter.rdataOffset = off;\\n        iter.nextOffset = off + rdataLength;\\n    }\\n\\n    /**\\n    * @dev Returns the name of the current record.\\n    * @param iter The iterator.\\n    * @return A new bytes object containing the owner name from the RR.\\n    */\\n    function name(RRIterator memory iter) internal pure returns(bytes memory) {\\n        return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n    }\\n\\n    /**\\n    * @dev Returns the rdata portion of the current record.\\n    * @param iter The iterator.\\n    * @return A new bytes object containing the RR's RDATA.\\n    */\\n    function rdata(RRIterator memory iter) internal pure returns(bytes memory) {\\n        return iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n    }\\n\\n    uint constant DNSKEY_FLAGS = 0;\\n    uint constant DNSKEY_PROTOCOL = 2;\\n    uint constant DNSKEY_ALGORITHM = 3;\\n    uint constant DNSKEY_PUBKEY = 4;\\n\\n    struct DNSKEY {\\n        uint16 flags;\\n        uint8 protocol;\\n        uint8 algorithm;\\n        bytes publicKey;\\n    }\\n\\n    function readDNSKEY(bytes memory data, uint offset, uint length) internal pure returns(DNSKEY memory self) {\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\n        self.publicKey = data.substring(offset + DNSKEY_PUBKEY, length - DNSKEY_PUBKEY);\\n    } \\n\\n    uint constant DS_KEY_TAG = 0;\\n    uint constant DS_ALGORITHM = 2;\\n    uint constant DS_DIGEST_TYPE = 3;\\n    uint constant DS_DIGEST = 4;\\n\\n    struct DS {\\n        uint16 keytag;\\n        uint8 algorithm;\\n        uint8 digestType;\\n        bytes digest;\\n    }\\n\\n    function readDS(bytes memory data, uint offset, uint length) internal pure returns(DS memory self) {\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\n    }\\n\\n    struct NSEC3 {\\n        uint8 hashAlgorithm;\\n        uint8 flags;\\n        uint16 iterations;\\n        bytes salt;\\n        bytes32 nextHashedOwnerName;\\n        bytes typeBitmap;\\n    }\\n\\n    uint constant NSEC3_HASH_ALGORITHM = 0;\\n    uint constant NSEC3_FLAGS = 1;\\n    uint constant NSEC3_ITERATIONS = 2;\\n    uint constant NSEC3_SALT_LENGTH = 4;\\n    uint constant NSEC3_SALT = 5;\\n\\n    function readNSEC3(bytes memory data, uint offset, uint length) internal pure returns(NSEC3 memory self) {\\n        uint end = offset + length;\\n        self.hashAlgorithm = data.readUint8(offset + NSEC3_HASH_ALGORITHM);\\n        self.flags = data.readUint8(offset + NSEC3_FLAGS);\\n        self.iterations = data.readUint16(offset + NSEC3_ITERATIONS);\\n        uint8 saltLength = data.readUint8(offset + NSEC3_SALT_LENGTH);\\n        offset = offset + NSEC3_SALT;\\n        self.salt = data.substring(offset, saltLength);\\n        offset += saltLength;\\n        uint8 nextLength = data.readUint8(offset);\\n        require(nextLength <= 32);\\n        offset += 1;\\n        self.nextHashedOwnerName = data.readBytesN(offset, nextLength);\\n        offset += nextLength;\\n        self.typeBitmap = data.substring(offset, end - offset);\\n    }\\n\\n    function checkTypeBitmap(NSEC3 memory self, uint16 rrtype) internal pure returns(bool) {\\n        return checkTypeBitmap(self.typeBitmap, 0, rrtype);\\n    }\\n\\n    /**\\n    * @dev Checks if a given RR type exists in a type bitmap.\\n    * @param bitmap The byte string to read the type bitmap from.\\n    * @param offset The offset to start reading at.\\n    * @param rrtype The RR type to check for.\\n    * @return True if the type is found in the bitmap, false otherwise.\\n    */\\n    function checkTypeBitmap(bytes memory bitmap, uint offset, uint16 rrtype) internal pure returns (bool) {\\n        uint8 typeWindow = uint8(rrtype >> 8);\\n        uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n        uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n        for (uint off = offset; off < bitmap.length;) {\\n            uint8 window = bitmap.readUint8(off);\\n            uint8 len = bitmap.readUint8(off + 1);\\n            if (typeWindow < window) {\\n                // We've gone past our window; it's not here.\\n                return false;\\n            } else if (typeWindow == window) {\\n                // Check this type bitmap\\n                if (len <= windowByte) {\\n                    // Our type is past the end of the bitmap\\n                    return false;\\n                }\\n                return (bitmap.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n            } else {\\n                // Skip this type bitmap\\n                off += len + 2;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function compareNames(bytes memory self, bytes memory other) internal pure returns (int) {\\n        if (self.equals(other)) {\\n            return 0;\\n        }\\n\\n        uint off;\\n        uint otheroff;\\n        uint prevoff;\\n        uint otherprevoff;\\n        uint counts = labelCount(self, 0);\\n        uint othercounts = labelCount(other, 0);\\n\\n        // Keep removing labels from the front of the name until both names are equal length\\n        while (counts > othercounts) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        while (othercounts > counts) {\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            othercounts--;\\n        }\\n\\n        // Compare the last nonequal labels to each other\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            counts -= 1;\\n        }\\n\\n        if (off == 0) {\\n            return -1;\\n        }\\n        if(otheroff == 0) {\\n            return 1;\\n        }\\n\\n        return self.compare(prevoff + 1, self.readUint8(prevoff), other, otherprevoff + 1, other.readUint8(otherprevoff));\\n    }\\n\\n    /**\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\n     */\\n    function serialNumberGte(uint32 i1, uint32 i2) internal pure returns(bool) {\\n        return int32(i1) - int32(i2) >= 0;\\n    }\\n\\n    function progress(bytes memory body, uint off) internal pure returns(uint) {\\n        return off + 1 + body.readUint8(off);\\n    }\\n\\n    /**\\n     * @dev Computes the keytag for a chunk of data.\\n     * @param data The data to compute a keytag for.\\n     * @return The computed key tag.\\n     */\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n        /* This function probably deserves some explanation.\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\n         *\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n         *         uint ac;\\n         *         for (uint i = 0; i < data.length; i++) {\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\n         *         }\\n         *         return uint16(ac + (ac >> 16));\\n         *     }\\n         *\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\n         * large words work in our favour.\\n         *\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\n         *\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\n         * and the remaining sums can be done just on ac1.\\n         */\\n        unchecked {\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\n            uint ac1;\\n            uint ac2;\\n            for(uint i = 0; i < data.length + 31; i += 32) {\\n                uint word;\\n                assembly {\\n                    word := mload(add(add(data, 32), i))\\n                }\\n                if(i + 32 > data.length) {\\n                    uint unused = 256 - (data.length - i) * 8;\\n                    word = (word >> unused) << unused;\\n                }\\n                ac1 += (word & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8;\\n                ac2 += (word & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\n            }\\n            ac1 = (ac1 & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\\n                + ((ac1 & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16);\\n            ac2 = (ac2 & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\\n                + ((ac2 & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16);\\n            ac1 = (ac1 << 8) + ac2;\\n            ac1 = (ac1 & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\\n                + ((ac1 & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32);\\n            ac1 = (ac1 & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\\n                + ((ac1 & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64);\\n            ac1 = (ac1 & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                + (ac1 >> 128);\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\n            return uint16(ac1);\\n        }\\n    }\\n}\",\"keccak256\":\"0x811642c86c539d645ef99a15fa1bf0eb4ce963cf1a618ef2a6f34d27a5e34030\"},\"contracts/dnssec-oracle/algorithms/Algorithm.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n* @dev An interface for contracts implementing a DNSSEC (signing) algorithm.\\n*/\\ninterface Algorithm {\\n    /**\\n    * @dev Verifies a signature.\\n    * @param key The public key to verify with.\\n    * @param data The signed data to verify.\\n    * @param signature The signature to verify.\\n    * @return True iff the signature is valid.\\n    */\\n    function verify(bytes calldata key, bytes calldata data, bytes calldata signature) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x51d6251568844e435f58952354abe8c8c8e978ab40ecb0bbb2f5bd767838b3a7\"},\"contracts/dnssec-oracle/digests/Digest.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n* @dev An interface for contracts implementing a DNSSEC digest.\\n*/\\ninterface Digest {\\n    /**\\n    * @dev Verifies a cryptographic hash.\\n    * @param data The data to hash.\\n    * @param hash The hash to compare to.\\n    * @return True iff the hashed data matches the provided hash value.\\n    */\\n    function verify(bytes calldata data, bytes calldata hash) external virtual pure returns (bool);\\n}\\n\",\"keccak256\":\"0x259720cef78c019d38b908bc7dd524f087c58d8c40792cebcdd4e982c628bc9a\"},\"contracts/dnssec-oracle/nsec3digests/NSEC3Digest.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface for contracts that implement NSEC3 digest algorithms.\\n */\\ninterface NSEC3Digest {\\n    /**\\n     * @dev Performs an NSEC3 iterated hash.\\n     * @param salt The salt value to use on each iteration.\\n     * @param data The data to hash.\\n     * @param iterations The number of iterations to perform.\\n     * @return The result of the iterated hash operation.\\n     */\\n     function hash(bytes calldata salt, bytes calldata data, uint iterations) external virtual pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb3b61aee6bb472158b7ace6b5644dcb668271296b98a6dcde24dc72e3cdf4950\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620039b3380380620039b383398101604081905262000034916200023c565b600180546001600160a01b0319163317905580516200005b90600090602084019062000180565b5060408051606081018252600080825263e090bba060208301528251919283019162000088919062000354565b60408051918290039091206001600160601b031916909152602b60009081527fc92a43746f20f69898978a3075767b860ba247ac0639d1831bf8c942c5db2389602090815283517f95c6356c1b7a542b884d2484ef785c9c7224e77e1016c20007bddc15c23b452f8054928601519585015160601c6801000000000000000002600160401b600160e01b031963ffffffff978816640100000000026001600160401b03199095169790931696909617929092171693909317909255517f55ced933cdd5a34dd03eb5d4bef19ec6ebb251dcd7a988eee0c1b9a13baaa88b916200017191620003ce565b60405180910390a15062000470565b8280546200018e9062000318565b90600052602060002090601f016020900481019282620001b25760008555620001fd565b82601f10620001cd57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fd578251825591602001919060010190620001e0565b506200020b9291506200020f565b5090565b5b808211156200020b576000815560010162000210565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200025057600080fd5b82516001600160401b03808211156200026857600080fd5b818501915085601f8301126200027d57600080fd5b81518181111562000292576200029262000226565b604051601f8201601f19908116603f01168101908382118183101715620002bd57620002bd62000226565b816040528281528886848701011115620002d657600080fd5b600093505b82841015620002fa5784840186015181850187015292850192620002db565b828411156200030c5760008684830101525b98975050505050505050565b600181811c908216806200032d57607f821691505b6020821081036200034e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354620003648162000318565b600182811680156200037f57600181146200039157620003c2565b60ff19841687528287019450620003c2565b8760005260208060002060005b85811015620003b95781548a8201529084019082016200039e565b50505082870194505b50929695505050505050565b604081526000600180604084015260006060840152602060808185015260008554620003fa8162000318565b80608088015260a0858316600081146200041d5760018114620004325762000462565b60ff1984168983015260c08901945062000462565b896000528560002060005b848110156200045a5781548b82018501529088019087016200043d565b8a0183019550505b509298975050505050505050565b61353380620004806000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806373cc48a61161008c57806398d35f201161006657806398d35f201461025b578063bd7ed31a14610263578063c327deef14610299578063d7b82ebe146102cf57600080fd5b806373cc48a6146101cd5780638438dc04146102285780638da5cb5b1461023b57600080fd5b806313af4035116100c857806313af40351461017457806328e7677d146101875780632c095cbb1461019a578063435cc162146101ad57600080fd5b8063020ed8d3146100ef578063087991bc146101045780630b1a249514610161575b600080fd5b6101026100fd366004612a3b565b6102e2565b005b610117610112366004612acd565b610396565b6040805163ffffffff94851681529390921660208401527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016908201526060015b60405180910390f35b61010261016f366004612cb6565b61040b565b610102610182366004612d74565b6105fa565b610102610195366004612a3b565b610665565b6101026101a8366004612d91565b610711565b6101c06101bb366004612e2a565b61084f565b6040516101589190612f73565b6102036101db366004612f86565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610158565b610102610236366004612a3b565b6108d7565b6001546102039073ffffffffffffffffffffffffffffffffffffffff1681565b6101c0610983565b610203610271366004612f86565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6102036102a7366004612f86565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101c06102dd366004612fa1565b610a11565b60015473ffffffffffffffffffffffffffffffffffffffff16331461030657600080fd5b60ff821660008181526003602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527ff73c3c226af96b7f1ba666a21b3ceaf2be3ee6a365e3178fd9cd1eaae0075aa891015b60405180910390a15050565b6000806000806002600087876040516103b0929190613005565b60408051918290039091208252602080830193909352908101600090812061ffff8b16825290925290205463ffffffff8082169550640100000000820416935068010000000000000000900460601b91505093509350939050565b8351602080860191909120600090815260028252604080822061ffff891683529092529081205463ffffffff16906104438584610a26565b9050610450818784610b17565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081018290526101008101829052610120810191909152845151156104c2576104b58585610a26565b90506104c2818885610b17565b60006104cd83610b5d565b602081015190915060fe16156104e257600080fd5b6104ed816027610bbc565b1580156105125750610500816002610bbc565b15806105125750610512816006610bbc565b61051b57600080fd5b61052c898985610120015184610bce565b156105805787516020808a0191909120600090815260028252604080822061ffff8d1683529092522080547fffffffff000000000000000000000000000000000000000000000000000000001690556105ef565b61059f888461012001518385610120015161059a87610b5d565b610bfe565b156100ea5787516020808a0191909120600090815260028252604080822061ffff8d1683529092522080547fffffffff000000000000000000000000000000000000000000000000000000001690555b505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461061e57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461068957600080fd5b60ff821660008181526004602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527f2fcc274c3b72dd483ab201bfa87295e3817e8b9b10693219873b722ca1af00c7910161038a565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e08101829052610100810182905261012081019190915261076e8383610a26565b805190915061ffff16602f1461078357600080fd5b60a08101518451602080870191909120600090815260028252604080822061ffff8a16835290925220546107bd919063ffffffff16610d19565b6107c657600080fd5b60006107d182610d32565b905080515160208201511015610843576107f2818361012001518789610d90565b50508251602080850191909120600090815260028252604080822061ffff881683529092522080547fffffffff00000000000000000000000000000000000000000000000000000000169055610849565b50600080fd5b50505050565b6060600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b85518110156108cc576108b88682815181106108aa576108aa613015565b602002602001015183610f3e565b9150806108c481613073565b91505061088c565b5090505b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108fb57600080fd5b60ff821660008181526005602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527fc7eec866a7a1386188cc3ca20ffea75b71bd3e90a60b6791b1d3f0971145118d910161038a565b600080546109909061308d565b80601f01602080910402602001604051908101604052809291908181526020018280546109bc9061308d565b8015610a095780601f106109de57610100808354040283529160200191610a09565b820191906000526020600020905b8154815290600101906020018083116109ec57829003601f168201915b505050505081565b6060610a1d8383610f3e565b90505b92915050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e0810182905261010081018290526101208101919091528251610a8490611166565b9050610a948160e00151836112a8565b610a9d57600080fd5b6000610aad82836000015161132d565b604083015190915060ff16610ac38260006113db565b14610acd57600080fd5b61012082018190526080820151610ae49042610d19565b610aed57600080fd5b610afb428360a00151610d19565b610b0457600080fd5b610b1081838686611438565b5092915050565b610b258360a0015182610d19565b610b2e57600080fd5b825161ffff16603214610b4057600080fd5b610b4f83610120015183611541565b610b5857600080fd5b505050565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820183905260a082015290610b9783610d32565b60a081015160c08201519192506108d091610bb39082906130da565b835191906115af565b6000610a1d8360a001516000846116f6565b6000610bdb82848661180b565b15610bf257610bea8286610bbc565b159050610bf6565b5060005b949350505050565b602081015160009060fe1615610c1357600080fd5b6000610c1e86611832565b90506000610c2b85611832565b9050600080610c3a8a8261184e565b610c459060016130f1565b60ff1690505b8951811015610d075783610c7789610c7284858f51610c6a91906130da565b8f9190611872565b6118f4565b03610cdb576000610c9387610c7285868f51610c6a91906130da565b90508660800151841015610cbf578381118015610cb35750866080015181105b95505050505050610d10565b83811180610cb357508660800151811095505050505050610d10565b905080610ce88a8261184e565b610cf39060016130f1565b610d009060ff1682613116565b9050610c4b565b50600093505050505b95945050505050565b600080610d26838561312e565b60030b12159392505050565b610d806040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b610a2082610100015160006119a6565b60a08401518451600090610da49083611a07565b905060008660a001518760c00151610dbc91906130da565b9050818111610dca57600080fd5b6000610dd68688611a61565b905080600003610e0557610df6610ded8486613116565b895190876116f6565b15610e0057600080fd5b610e4c565b8751600090610e15908686611872565b905060008213610e2457600080fd5b6000610e308983611a61565b12156105ef576000610e428883611a61565b126105ef57600080fd5b5050505050505050565b60c08101516020820181905281515111610e6d5750565b6000610e8182600001518360200151611a07565b8260200151610e909190613116565b8251909150610e9f9082611bba565b61ffff166040830152610eb3600282613116565b8251909150610ec29082611bba565b61ffff166060830152610ed6600282613116565b8251909150610ee59082611be2565b63ffffffff166080830152610efb600482613116565b8251909150600090610f0d9083611bba565b61ffff169050610f1e600283613116565b60a084018190529150610f318183613116565b60c0909301929092525050565b604080516101408101825260008082526020820181905291810182905260608181018390526080820183905260a0820183905260c082019290925260e0810182905261010081018290526101208101829052610f9a8484610a26565b61012081015180516020918201206000908152600282526040808220845161ffff1683529092522080549192509068010000000000000000900460601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000161561101e5760a08201518154611015919063ffffffff16610d19565b61101e57600080fd5b604080516060808201835260a085015163ffffffff9081168352608086015181166020808501918252610100880180518051908301207fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168688019081526101208a0180518051908501206000908152600285528981208c5161ffff16825290945292889020965187549451915190961c68010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff918616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909516969095169590951792909217939093169190911790925551905191517f55ced933cdd5a34dd03eb5d4bef19ec6ebb251dcd7a988eee0c1b9a13baaa88b926111519291613193565b60405180910390a15061010001519392505050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082018190526101008201819052610120820152906111c1908390611bba565b61ffff1681526111d282600261184e565b60ff1660208201526111e582600361184e565b60ff1660408201526111f8826004611be2565b63ffffffff9081166060830152611214908390600890611be216565b63ffffffff9081166080830152611230908390600c90611be216565b63ffffffff90811660a083015261124c908390601090611bba16565b61ffff1660c0820152611260826012611c0c565b60e082018190525161129d90611277906012613116565b8260e00151516012855161128b91906130da565b61129591906130da565b849190611872565b610100820152919050565b6000806112bf6112b88483611a07565b8490611bba565b8351602080860191909120865187830120600090815260028352604080822061ffff9095168252939092529190205468010000000000000000900460601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090811691161491505092915050565b6060600061133a84610d32565b90505b80515160208201511015610b1057606081015161ffff1660011461136057600080fd5b81516000036113795761137281611c27565b91506113b5565b6020810151815161138991611a07565b82511461139557600080fd5b8051602082015183516113ac928592600092611c48565b6113b557600080fd5b8261ffff16816040015161ffff16146113cd57600080fd5b6113d681610e56565b61133d565b6000805b835183106113ef576113ef6131b8565b60006113fb858561184e565b60ff16905061140b816001613116565b6114159085613116565b9350806000036114255750610a1d565b611430600183613116565b9150506113df565b83518360e0015151111561144b57600080fd5b6114706000858560e0015151875161146391906130da565b60e0870151929190611c6b565b61147957600080fd5b600061148582826119a6565b9050602b61ffff16816040015161ffff16036114b4576114a6848483611ca0565b6114af57600080fd5b61153a565b603061ffff16816040015161ffff16036114d3576114a6848483611d39565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e6f2076616c69642070726f6f6620666f756e6400000000000000000000000060448201526064015b60405180910390fd5b5050505050565b60008061154e848261184e565b6115599060016130f1565b60ff16905060005b8351811015610bf25761157684828785611c6b565b1561158657600192505050610a20565b611590848261184e565b61159b9060016130f1565b6115a89060ff1682613116565b9050611561565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820183905260a0820152906115ea8385613116565b90506116016115fa600086613116565b869061184e565b60ff1682526116146115fa600186613116565b60ff16602083015261163161162a600286613116565b8690611bba565b61ffff166040830152600061165161164a600487613116565b879061184e565b905061165e600586613116565b945061166e868660ff8416611872565b606084015261168060ff821686613116565b9450600061168e878761184e565b905060208160ff1611156116a157600080fd5b6116ac600187613116565b95506116bc878760ff8416611de1565b60808501526116ce60ff821687613116565b95506116e6866116de81866130da565b899190611872565b60a0850152509195945050505050565b600060ff600883811c821691839161170f918616613216565b90506000611721600780871690613237565b600160ff919091161b9050855b87518110156117fd576000611743898361184e565b9050600061175c611755846001613116565b8b9061184e565b90508160ff168660ff16101561177b57600096505050505050506108d0565b8160ff168660ff16036117dc578460ff168160ff16116117a457600096505050505050506108d0565b836117c76117b560ff881686613116565b6117c0906002613116565b8c9061184e565b1660ff166000141596505050505050506108d0565b6117e78160026130f1565b6117f49060ff1684613116565b9250505061172e565b506000979650505050505050565b60008061181885846118f4565b9050600061182585611832565b9190911495945050505050565b6000610a206001611843848461184e565b84919060ff16611e22565b600082828151811061186257611862613015565b016020015160f81c905092915050565b82516060906118818385613116565b111561188c57600080fd5b60008267ffffffffffffffff8111156118a7576118a7612b20565b6040519080825280601f01601f1916602001820160405280156118d1576020820181803683370190505b509050602080820190868601016118e98282876120a2565b509095945050505050565b815160ff166000908152600560205260408082205460608501518286015192517f68f9dab200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216926368f9dab2926119659291879160040161325a565b602060405180830381865afa158015611982573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190613294565b6119f46040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c08101829052610a2081610e56565b6000815b83518110611a1b57611a1b6131b8565b6000611a27858361184e565b60ff169050611a37816001613116565b611a419083613116565b915080600003611a515750611a57565b50611a0b565b610bf683826130da565b6000611a6d83836120f8565b15611a7a57506000610a20565b6000806000806000611a8d8860006113db565b90506000611a9c8860006113db565b90505b80821115611ac857859350611ab48987612116565b955081611ac0816132ad565b925050611a9f565b81811115611af157849250611add8886612116565b945080611ae9816132ad565b915050611ac8565b600082118015611b0a5750611b0889878a88611c6b565b155b15611b3f57859350611b1c8987612116565b9550849250611b2b8886612116565b9450611b386001836130da565b9150611af1565b85600003611b57576000199650505050505050610a20565b84600003611b6e5760019650505050505050610a20565b611bad611b7c856001613116565b611b868b8761184e565b60ff168a611b95876001613116565b611b9f8d8961184e565b8e949392919060ff1661213a565b9998505050505050505050565b8151600090611bca836002613116565b1115611bd557600080fd5b50016002015161ffff1690565b8151600090611bf2836004613116565b1115611bfd57600080fd5b50016004015163ffffffff1690565b60606000611c1a8484611a07565b9050610bf6848483611872565b60208101518151606091610a2091611c3f9082611a07565b84519190611872565b6000611c5584848461222f565b611c6087878561222f565b149695505050505050565b6000611c848383848651611c7f91906130da565b61222f565b611c968686878951611c7f91906130da565b1495945050505050565b600080611cac85610d32565b90505b80515160208201511015610bf257604081015161ffff16603014611cd257600080fd5b6000611cdd82612253565b90506000611cf8600083518461226f9092919063ffffffff16565b9050611d068183898961230d565b15611d2957611d1f611d1784611c27565b868385612438565b93505050506108d0565b5050611d3481610e56565b611caf565b6000611d528460e00151611d4c84611c27565b906120f8565b611d5b57600080fd5b81515160208301511015611dd757611d7a8460e00151611d4c84611c27565b611d8357600080fd5b6000611d8e83612253565b90506000611da9600083518461226f9092919063ffffffff16565b9050611db78183888861230d565b15611dc7576001925050506108d0565b5050611dd282610e56565b611d5b565b5060009392505050565b60006020821115611df157600080fd5b8351611dfd8385613116565b1115611e0857600080fd5b506020919092018101519190036101000a60001901191690565b60006034821115611e3257600080fd5b600080805b84811015611f8657600087611e4c8389613116565b81518110611e5c57611e5c613015565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f30000000000000000000000000000000000000000000000000000000000000008110801590611ef757507f7a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821611155b611f0057600080fd5b6040518060800160405280604781526020016134b760479139611f28603060f884901c6130da565b81518110611f3857611f38613015565b0160209081015160f81c9350831115611f5057600080fd5b611f5b6001876130da565b8203611f675750611f86565b5060059290921b60ff8216179180611f7e81613073565b915050611e37565b506000611f948560056132c4565b9050611fa16008866132e3565b600003611fb9578160ff16600584901b179250612088565b611fc46008866132e3565b600203611ff25760028260ff16901c60ff16600384901b179250600281611feb91906130da565b9050612088565b611ffd6008866132e3565b6004036120245760048260ff16901c60ff16600184901b179250600481611feb91906130da565b61202f6008866132e3565b6005036120565760018260ff16901c60ff16600484901b179250600181611feb91906130da565b6120616008866132e3565b6007036100ea5760038260ff16901c60ff16600284901b179250600381611feb91906130da565b612094816101006130da565b9290921b9695505050505050565b602081106120da57815183526120b9602084613116565b92506120c6602083613116565b91506120d36020826130da565b90506120a2565b905182516020929092036101000a6000190180199091169116179052565b600081518351148015610a1d5750610a1d8360008460008751611c48565b6000612122838361184e565b60ff16612130836001613116565b610a1d9190613116565b600084808310156121485750815b60208789018101908587010160005b8381101561221457825182518082146121e4576000602087111561217e57506000196121ba565b60018461218c8960206130da565b6121969190613116565b6121a19060086132c4565b6121ac9060026133db565b6121b691906130da565b1990505b60006121ca8383168584166133e7565b905080156121e15797506122259650505050505050565b50505b6121ef602086613116565b94506121fc602085613116565b9350505060208161220d9190613116565b9050612157565b5061221f85896133e7565b93505050505b9695505050505050565b825160009061223e8385613116565b111561224957600080fd5b5091016020012090565b60a081015160c0820151606091610a2091611c3f9082906130da565b60408051608081018252600080825260208201819052918101919091526060808201526122a76122a0600085613116565b8590611bba565b61ffff1681526122c26122bb600285613116565b859061184e565b60ff1660208201526122d86122bb600385613116565b60ff1660408201526123016122ee600485613116565b6122f96004856130da565b869190611872565b60608201529392505050565b6000846020015160ff1660031461232657506000610bf6565b826020015160ff16856040015160ff161461234357506000610bf6565b600061234e85612539565b90508360c0015161ffff168161ffff161461236d576000915050610bf6565b855161010016600003612384576000915050610bf6565b60408087015160ff16600090815260036020908152908290205485519186015192517fde8f50a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169263de8f50a1926123f7928a929060040161345b565b602060405180830381865afa158015612414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122259190613494565b60008061244483612539565b90505b8451516020860151101561252d5760a085015160c086015160009161247a916124719082906130da565b8851919061226f565b90508161ffff16816000015161ffff1614612495575061251f565b846040015160ff16816020015160ff16146124b0575061251f565b6040805180820190915260608152600060208201526124dd855189516124d69190613116565b829061277d565b506124e881896127e2565b506124f381866127e2565b5061250b826040015182600001518460600151612809565b1561251c5760019350505050610bf6565b50505b61252885610e56565b612447565b50600095945050505050565b6000612000825111156125a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4c6f6e67206b657973206e6f74207065726d69747465640000000000000000006044820152606401611531565b60008060005b8451601f0181101561261d57600081602087010151905085518260200111156125e35785518290036008026101000390811c901b5b7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff600882901c811694909401931691909101906020016125ae565b506010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c827dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff160191506010817fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff1601905080600883901b0191506020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c827bffffffff00000000ffffffff00000000ffffffff00000000ffffffff160191506040827fffffffffffffffff0000000000000000ffffffffffffffff000000000000000016901c8277ffffffffffffffff0000000000000000ffffffffffffffff16019150608082901c826fffffffffffffffffffffffffffffffff16019150601082901c61ffff16820191508192505050919050565b60408051808201909152606081526000602082015261279d6020836132e3565b156127c5576127ad6020836132e3565b6127b89060206130da565b6127c29083613116565b91505b506020828101829052604080518085526000815290920101905290565b604080518082019091526060815260006020820152610a1d838460000151518485516128e8565b60ff831660009081526004602052604081205473ffffffffffffffffffffffffffffffffffffffff1661283e575060006108d0565b60ff84166000908152600460208190526040918290205491517ff7e83aee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163f7e83aee916128a7918791879101613193565b602060405180830381865afa1580156128c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190613494565b604080518082019091526060815260006020820152825182111561290b57600080fd5b602085015161291a8386613116565b111561294d5761294d8561293d876020015187866129389190613116565b6129d2565b6129489060026132c4565b6129e9565b60008086518051876020830101935080888701111561296c5787860182525b505050602084015b602084106129ac578051825261298b602083613116565b9150612998602082613116565b90506129a56020856130da565b9350612974565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6000818311156129e3575081610a20565b50919050565b81516129f5838361277d565b5061084983826127e2565b803560ff81168114612a1157600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff81168114612a3857600080fd5b50565b60008060408385031215612a4e57600080fd5b612a5783612a00565b91506020830135612a6781612a16565b809150509250929050565b803561ffff81168114612a1157600080fd5b60008083601f840112612a9657600080fd5b50813567ffffffffffffffff811115612aae57600080fd5b602083019150836020828501011115612ac657600080fd5b9250929050565b600080600060408486031215612ae257600080fd5b612aeb84612a72565b9250602084013567ffffffffffffffff811115612b0757600080fd5b612b1386828701612a84565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612b9657612b96612b20565b604052919050565b600082601f830112612baf57600080fd5b813567ffffffffffffffff811115612bc957612bc9612b20565b612bfa60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612b4f565b818152846020838601011115612c0f57600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215612c3e57600080fd5b6040516040810167ffffffffffffffff8282108183111715612c6257612c62612b20565b816040528293508435915080821115612c7a57600080fd5b612c8686838701612b9e565b83526020850135915080821115612c9c57600080fd5b50612ca985828601612b9e565b6020830152505092915050565b600080600080600060a08688031215612cce57600080fd5b612cd786612a72565b9450602086013567ffffffffffffffff80821115612cf457600080fd5b612d0089838a01612b9e565b95506040880135915080821115612d1657600080fd5b612d2289838a01612c2c565b94506060880135915080821115612d3857600080fd5b612d4489838a01612c2c565b93506080880135915080821115612d5a57600080fd5b50612d6788828901612b9e565b9150509295509295909350565b600060208284031215612d8657600080fd5b8135610a1d81612a16565b60008060008060808587031215612da757600080fd5b612db085612a72565b9350602085013567ffffffffffffffff80821115612dcd57600080fd5b612dd988838901612b9e565b94506040870135915080821115612def57600080fd5b612dfb88838901612c2c565b93506060870135915080821115612e1157600080fd5b50612e1e87828801612b9e565b91505092959194509250565b600080600060408486031215612e3f57600080fd5b833567ffffffffffffffff80821115612e5757600080fd5b818601915086601f830112612e6b57600080fd5b8135602082821115612e7f57612e7f612b20565b8160051b612e8e828201612b4f565b928352848101820192828101908b851115612ea857600080fd5b83870192505b84831015612ee457823586811115612ec65760008081fd5b612ed48d86838b0101612c2c565b8352509183019190830190612eae565b9850505087013592505080821115612efb57600080fd5b50612b1386828701612a84565b6000815180845260005b81811015612f2e57602081850181015186830182015201612f12565b81811115612f40576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a1d6020830184612f08565b600060208284031215612f9857600080fd5b610a1d82612a00565b60008060408385031215612fb457600080fd5b823567ffffffffffffffff80821115612fcc57600080fd5b612fd886838701612c2c565b93506020850135915080821115612fee57600080fd5b50612ffb85828601612b9e565b9150509250929050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019820361308657613086613044565b5060010190565b600181811c908216806130a157607f821691505b6020821081036129e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000828210156130ec576130ec613044565b500390565b600060ff821660ff84168060ff0382111561310e5761310e613044565b019392505050565b6000821982111561312957613129613044565b500190565b60008160030b8360030b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000183128115161561317157613171613044565b81637fffffff01831381161561318957613189613044565b5090039392505050565b6040815260006131a66040830185612f08565b8281036020840152610d108185612f08565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061ffff8084168061322b5761322b6131e7565b92169190910492915050565b600060ff821660ff84168082101561325157613251613044565b90039392505050565b60608152600061326d6060830186612f08565b828103602084015261327f8186612f08565b91505061ffff83166040830152949350505050565b6000602082840312156132a657600080fd5b5051919050565b6000816132bc576132bc613044565b506000190190565b60008160001904831182151516156132de576132de613044565b500290565b6000826132f2576132f26131e7565b500690565b600181815b8085111561333257816000190482111561331857613318613044565b8085161561332557918102915b93841c93908002906132fc565b509250929050565b60008261334957506001610a20565b8161335657506000610a20565b816001811461336c576002811461337657613392565b6001915050610a20565b60ff84111561338757613387613044565b50506001821b610a20565b5060208310610133831016604e8410600b84101617156133b5575081810a610a20565b6133bf83836132f7565b80600019048211156133d3576133d3613044565b029392505050565b6000610a1d838361333a565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561342157613421613044565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561345557613455613044565b50500390565b60608152600061346e6060830186612f08565b82810360208401526134808186612f08565b905082810360408401526122258185612f08565b6000602082840312156134a657600080fd5b81518015158114610a1d57600080fdfe00010203040506070809ffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fffffffffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fa264697066735822122044ecdc7938e995ea214268ebadb8d4d83adfe70ee006ffc4a279649e78f8a89064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806373cc48a61161008c57806398d35f201161006657806398d35f201461025b578063bd7ed31a14610263578063c327deef14610299578063d7b82ebe146102cf57600080fd5b806373cc48a6146101cd5780638438dc04146102285780638da5cb5b1461023b57600080fd5b806313af4035116100c857806313af40351461017457806328e7677d146101875780632c095cbb1461019a578063435cc162146101ad57600080fd5b8063020ed8d3146100ef578063087991bc146101045780630b1a249514610161575b600080fd5b6101026100fd366004612a3b565b6102e2565b005b610117610112366004612acd565b610396565b6040805163ffffffff94851681529390921660208401527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016908201526060015b60405180910390f35b61010261016f366004612cb6565b61040b565b610102610182366004612d74565b6105fa565b610102610195366004612a3b565b610665565b6101026101a8366004612d91565b610711565b6101c06101bb366004612e2a565b61084f565b6040516101589190612f73565b6102036101db366004612f86565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610158565b610102610236366004612a3b565b6108d7565b6001546102039073ffffffffffffffffffffffffffffffffffffffff1681565b6101c0610983565b610203610271366004612f86565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6102036102a7366004612f86565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101c06102dd366004612fa1565b610a11565b60015473ffffffffffffffffffffffffffffffffffffffff16331461030657600080fd5b60ff821660008181526003602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527ff73c3c226af96b7f1ba666a21b3ceaf2be3ee6a365e3178fd9cd1eaae0075aa891015b60405180910390a15050565b6000806000806002600087876040516103b0929190613005565b60408051918290039091208252602080830193909352908101600090812061ffff8b16825290925290205463ffffffff8082169550640100000000820416935068010000000000000000900460601b91505093509350939050565b8351602080860191909120600090815260028252604080822061ffff891683529092529081205463ffffffff16906104438584610a26565b9050610450818784610b17565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081018290526101008101829052610120810191909152845151156104c2576104b58585610a26565b90506104c2818885610b17565b60006104cd83610b5d565b602081015190915060fe16156104e257600080fd5b6104ed816027610bbc565b1580156105125750610500816002610bbc565b15806105125750610512816006610bbc565b61051b57600080fd5b61052c898985610120015184610bce565b156105805787516020808a0191909120600090815260028252604080822061ffff8d1683529092522080547fffffffff000000000000000000000000000000000000000000000000000000001690556105ef565b61059f888461012001518385610120015161059a87610b5d565b610bfe565b156100ea5787516020808a0191909120600090815260028252604080822061ffff8d1683529092522080547fffffffff000000000000000000000000000000000000000000000000000000001690555b505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461061e57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461068957600080fd5b60ff821660008181526004602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527f2fcc274c3b72dd483ab201bfa87295e3817e8b9b10693219873b722ca1af00c7910161038a565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e08101829052610100810182905261012081019190915261076e8383610a26565b805190915061ffff16602f1461078357600080fd5b60a08101518451602080870191909120600090815260028252604080822061ffff8a16835290925220546107bd919063ffffffff16610d19565b6107c657600080fd5b60006107d182610d32565b905080515160208201511015610843576107f2818361012001518789610d90565b50508251602080850191909120600090815260028252604080822061ffff881683529092522080547fffffffff00000000000000000000000000000000000000000000000000000000169055610849565b50600080fd5b50505050565b6060600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b85518110156108cc576108b88682815181106108aa576108aa613015565b602002602001015183610f3e565b9150806108c481613073565b91505061088c565b5090505b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108fb57600080fd5b60ff821660008181526005602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558251938452908301527fc7eec866a7a1386188cc3ca20ffea75b71bd3e90a60b6791b1d3f0971145118d910161038a565b600080546109909061308d565b80601f01602080910402602001604051908101604052809291908181526020018280546109bc9061308d565b8015610a095780601f106109de57610100808354040283529160200191610a09565b820191906000526020600020905b8154815290600101906020018083116109ec57829003601f168201915b505050505081565b6060610a1d8383610f3e565b90505b92915050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e0810182905261010081018290526101208101919091528251610a8490611166565b9050610a948160e00151836112a8565b610a9d57600080fd5b6000610aad82836000015161132d565b604083015190915060ff16610ac38260006113db565b14610acd57600080fd5b61012082018190526080820151610ae49042610d19565b610aed57600080fd5b610afb428360a00151610d19565b610b0457600080fd5b610b1081838686611438565b5092915050565b610b258360a0015182610d19565b610b2e57600080fd5b825161ffff16603214610b4057600080fd5b610b4f83610120015183611541565b610b5857600080fd5b505050565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820183905260a082015290610b9783610d32565b60a081015160c08201519192506108d091610bb39082906130da565b835191906115af565b6000610a1d8360a001516000846116f6565b6000610bdb82848661180b565b15610bf257610bea8286610bbc565b159050610bf6565b5060005b949350505050565b602081015160009060fe1615610c1357600080fd5b6000610c1e86611832565b90506000610c2b85611832565b9050600080610c3a8a8261184e565b610c459060016130f1565b60ff1690505b8951811015610d075783610c7789610c7284858f51610c6a91906130da565b8f9190611872565b6118f4565b03610cdb576000610c9387610c7285868f51610c6a91906130da565b90508660800151841015610cbf578381118015610cb35750866080015181105b95505050505050610d10565b83811180610cb357508660800151811095505050505050610d10565b905080610ce88a8261184e565b610cf39060016130f1565b610d009060ff1682613116565b9050610c4b565b50600093505050505b95945050505050565b600080610d26838561312e565b60030b12159392505050565b610d806040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b610a2082610100015160006119a6565b60a08401518451600090610da49083611a07565b905060008660a001518760c00151610dbc91906130da565b9050818111610dca57600080fd5b6000610dd68688611a61565b905080600003610e0557610df6610ded8486613116565b895190876116f6565b15610e0057600080fd5b610e4c565b8751600090610e15908686611872565b905060008213610e2457600080fd5b6000610e308983611a61565b12156105ef576000610e428883611a61565b126105ef57600080fd5b5050505050505050565b60c08101516020820181905281515111610e6d5750565b6000610e8182600001518360200151611a07565b8260200151610e909190613116565b8251909150610e9f9082611bba565b61ffff166040830152610eb3600282613116565b8251909150610ec29082611bba565b61ffff166060830152610ed6600282613116565b8251909150610ee59082611be2565b63ffffffff166080830152610efb600482613116565b8251909150600090610f0d9083611bba565b61ffff169050610f1e600283613116565b60a084018190529150610f318183613116565b60c0909301929092525050565b604080516101408101825260008082526020820181905291810182905260608181018390526080820183905260a0820183905260c082019290925260e0810182905261010081018290526101208101829052610f9a8484610a26565b61012081015180516020918201206000908152600282526040808220845161ffff1683529092522080549192509068010000000000000000900460601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000161561101e5760a08201518154611015919063ffffffff16610d19565b61101e57600080fd5b604080516060808201835260a085015163ffffffff9081168352608086015181166020808501918252610100880180518051908301207fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168688019081526101208a0180518051908501206000908152600285528981208c5161ffff16825290945292889020965187549451915190961c68010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff918616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909516969095169590951792909217939093169190911790925551905191517f55ced933cdd5a34dd03eb5d4bef19ec6ebb251dcd7a988eee0c1b9a13baaa88b926111519291613193565b60405180910390a15061010001519392505050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082018190526101008201819052610120820152906111c1908390611bba565b61ffff1681526111d282600261184e565b60ff1660208201526111e582600361184e565b60ff1660408201526111f8826004611be2565b63ffffffff9081166060830152611214908390600890611be216565b63ffffffff9081166080830152611230908390600c90611be216565b63ffffffff90811660a083015261124c908390601090611bba16565b61ffff1660c0820152611260826012611c0c565b60e082018190525161129d90611277906012613116565b8260e00151516012855161128b91906130da565b61129591906130da565b849190611872565b610100820152919050565b6000806112bf6112b88483611a07565b8490611bba565b8351602080860191909120865187830120600090815260028352604080822061ffff9095168252939092529190205468010000000000000000900460601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090811691161491505092915050565b6060600061133a84610d32565b90505b80515160208201511015610b1057606081015161ffff1660011461136057600080fd5b81516000036113795761137281611c27565b91506113b5565b6020810151815161138991611a07565b82511461139557600080fd5b8051602082015183516113ac928592600092611c48565b6113b557600080fd5b8261ffff16816040015161ffff16146113cd57600080fd5b6113d681610e56565b61133d565b6000805b835183106113ef576113ef6131b8565b60006113fb858561184e565b60ff16905061140b816001613116565b6114159085613116565b9350806000036114255750610a1d565b611430600183613116565b9150506113df565b83518360e0015151111561144b57600080fd5b6114706000858560e0015151875161146391906130da565b60e0870151929190611c6b565b61147957600080fd5b600061148582826119a6565b9050602b61ffff16816040015161ffff16036114b4576114a6848483611ca0565b6114af57600080fd5b61153a565b603061ffff16816040015161ffff16036114d3576114a6848483611d39565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e6f2076616c69642070726f6f6620666f756e6400000000000000000000000060448201526064015b60405180910390fd5b5050505050565b60008061154e848261184e565b6115599060016130f1565b60ff16905060005b8351811015610bf25761157684828785611c6b565b1561158657600192505050610a20565b611590848261184e565b61159b9060016130f1565b6115a89060ff1682613116565b9050611561565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820183905260a0820152906115ea8385613116565b90506116016115fa600086613116565b869061184e565b60ff1682526116146115fa600186613116565b60ff16602083015261163161162a600286613116565b8690611bba565b61ffff166040830152600061165161164a600487613116565b879061184e565b905061165e600586613116565b945061166e868660ff8416611872565b606084015261168060ff821686613116565b9450600061168e878761184e565b905060208160ff1611156116a157600080fd5b6116ac600187613116565b95506116bc878760ff8416611de1565b60808501526116ce60ff821687613116565b95506116e6866116de81866130da565b899190611872565b60a0850152509195945050505050565b600060ff600883811c821691839161170f918616613216565b90506000611721600780871690613237565b600160ff919091161b9050855b87518110156117fd576000611743898361184e565b9050600061175c611755846001613116565b8b9061184e565b90508160ff168660ff16101561177b57600096505050505050506108d0565b8160ff168660ff16036117dc578460ff168160ff16116117a457600096505050505050506108d0565b836117c76117b560ff881686613116565b6117c0906002613116565b8c9061184e565b1660ff166000141596505050505050506108d0565b6117e78160026130f1565b6117f49060ff1684613116565b9250505061172e565b506000979650505050505050565b60008061181885846118f4565b9050600061182585611832565b9190911495945050505050565b6000610a206001611843848461184e565b84919060ff16611e22565b600082828151811061186257611862613015565b016020015160f81c905092915050565b82516060906118818385613116565b111561188c57600080fd5b60008267ffffffffffffffff8111156118a7576118a7612b20565b6040519080825280601f01601f1916602001820160405280156118d1576020820181803683370190505b509050602080820190868601016118e98282876120a2565b509095945050505050565b815160ff166000908152600560205260408082205460608501518286015192517f68f9dab200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216926368f9dab2926119659291879160040161325a565b602060405180830381865afa158015611982573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190613294565b6119f46040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c08101829052610a2081610e56565b6000815b83518110611a1b57611a1b6131b8565b6000611a27858361184e565b60ff169050611a37816001613116565b611a419083613116565b915080600003611a515750611a57565b50611a0b565b610bf683826130da565b6000611a6d83836120f8565b15611a7a57506000610a20565b6000806000806000611a8d8860006113db565b90506000611a9c8860006113db565b90505b80821115611ac857859350611ab48987612116565b955081611ac0816132ad565b925050611a9f565b81811115611af157849250611add8886612116565b945080611ae9816132ad565b915050611ac8565b600082118015611b0a5750611b0889878a88611c6b565b155b15611b3f57859350611b1c8987612116565b9550849250611b2b8886612116565b9450611b386001836130da565b9150611af1565b85600003611b57576000199650505050505050610a20565b84600003611b6e5760019650505050505050610a20565b611bad611b7c856001613116565b611b868b8761184e565b60ff168a611b95876001613116565b611b9f8d8961184e565b8e949392919060ff1661213a565b9998505050505050505050565b8151600090611bca836002613116565b1115611bd557600080fd5b50016002015161ffff1690565b8151600090611bf2836004613116565b1115611bfd57600080fd5b50016004015163ffffffff1690565b60606000611c1a8484611a07565b9050610bf6848483611872565b60208101518151606091610a2091611c3f9082611a07565b84519190611872565b6000611c5584848461222f565b611c6087878561222f565b149695505050505050565b6000611c848383848651611c7f91906130da565b61222f565b611c968686878951611c7f91906130da565b1495945050505050565b600080611cac85610d32565b90505b80515160208201511015610bf257604081015161ffff16603014611cd257600080fd5b6000611cdd82612253565b90506000611cf8600083518461226f9092919063ffffffff16565b9050611d068183898961230d565b15611d2957611d1f611d1784611c27565b868385612438565b93505050506108d0565b5050611d3481610e56565b611caf565b6000611d528460e00151611d4c84611c27565b906120f8565b611d5b57600080fd5b81515160208301511015611dd757611d7a8460e00151611d4c84611c27565b611d8357600080fd5b6000611d8e83612253565b90506000611da9600083518461226f9092919063ffffffff16565b9050611db78183888861230d565b15611dc7576001925050506108d0565b5050611dd282610e56565b611d5b565b5060009392505050565b60006020821115611df157600080fd5b8351611dfd8385613116565b1115611e0857600080fd5b506020919092018101519190036101000a60001901191690565b60006034821115611e3257600080fd5b600080805b84811015611f8657600087611e4c8389613116565b81518110611e5c57611e5c613015565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f30000000000000000000000000000000000000000000000000000000000000008110801590611ef757507f7a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821611155b611f0057600080fd5b6040518060800160405280604781526020016134b760479139611f28603060f884901c6130da565b81518110611f3857611f38613015565b0160209081015160f81c9350831115611f5057600080fd5b611f5b6001876130da565b8203611f675750611f86565b5060059290921b60ff8216179180611f7e81613073565b915050611e37565b506000611f948560056132c4565b9050611fa16008866132e3565b600003611fb9578160ff16600584901b179250612088565b611fc46008866132e3565b600203611ff25760028260ff16901c60ff16600384901b179250600281611feb91906130da565b9050612088565b611ffd6008866132e3565b6004036120245760048260ff16901c60ff16600184901b179250600481611feb91906130da565b61202f6008866132e3565b6005036120565760018260ff16901c60ff16600484901b179250600181611feb91906130da565b6120616008866132e3565b6007036100ea5760038260ff16901c60ff16600284901b179250600381611feb91906130da565b612094816101006130da565b9290921b9695505050505050565b602081106120da57815183526120b9602084613116565b92506120c6602083613116565b91506120d36020826130da565b90506120a2565b905182516020929092036101000a6000190180199091169116179052565b600081518351148015610a1d5750610a1d8360008460008751611c48565b6000612122838361184e565b60ff16612130836001613116565b610a1d9190613116565b600084808310156121485750815b60208789018101908587010160005b8381101561221457825182518082146121e4576000602087111561217e57506000196121ba565b60018461218c8960206130da565b6121969190613116565b6121a19060086132c4565b6121ac9060026133db565b6121b691906130da565b1990505b60006121ca8383168584166133e7565b905080156121e15797506122259650505050505050565b50505b6121ef602086613116565b94506121fc602085613116565b9350505060208161220d9190613116565b9050612157565b5061221f85896133e7565b93505050505b9695505050505050565b825160009061223e8385613116565b111561224957600080fd5b5091016020012090565b60a081015160c0820151606091610a2091611c3f9082906130da565b60408051608081018252600080825260208201819052918101919091526060808201526122a76122a0600085613116565b8590611bba565b61ffff1681526122c26122bb600285613116565b859061184e565b60ff1660208201526122d86122bb600385613116565b60ff1660408201526123016122ee600485613116565b6122f96004856130da565b869190611872565b60608201529392505050565b6000846020015160ff1660031461232657506000610bf6565b826020015160ff16856040015160ff161461234357506000610bf6565b600061234e85612539565b90508360c0015161ffff168161ffff161461236d576000915050610bf6565b855161010016600003612384576000915050610bf6565b60408087015160ff16600090815260036020908152908290205485519186015192517fde8f50a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169263de8f50a1926123f7928a929060040161345b565b602060405180830381865afa158015612414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122259190613494565b60008061244483612539565b90505b8451516020860151101561252d5760a085015160c086015160009161247a916124719082906130da565b8851919061226f565b90508161ffff16816000015161ffff1614612495575061251f565b846040015160ff16816020015160ff16146124b0575061251f565b6040805180820190915260608152600060208201526124dd855189516124d69190613116565b829061277d565b506124e881896127e2565b506124f381866127e2565b5061250b826040015182600001518460600151612809565b1561251c5760019350505050610bf6565b50505b61252885610e56565b612447565b50600095945050505050565b6000612000825111156125a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4c6f6e67206b657973206e6f74207065726d69747465640000000000000000006044820152606401611531565b60008060005b8451601f0181101561261d57600081602087010151905085518260200111156125e35785518290036008026101000390811c901b5b7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff600882901c811694909401931691909101906020016125ae565b506010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c827dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff160191506010817fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff1601905080600883901b0191506020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c827bffffffff00000000ffffffff00000000ffffffff00000000ffffffff160191506040827fffffffffffffffff0000000000000000ffffffffffffffff000000000000000016901c8277ffffffffffffffff0000000000000000ffffffffffffffff16019150608082901c826fffffffffffffffffffffffffffffffff16019150601082901c61ffff16820191508192505050919050565b60408051808201909152606081526000602082015261279d6020836132e3565b156127c5576127ad6020836132e3565b6127b89060206130da565b6127c29083613116565b91505b506020828101829052604080518085526000815290920101905290565b604080518082019091526060815260006020820152610a1d838460000151518485516128e8565b60ff831660009081526004602052604081205473ffffffffffffffffffffffffffffffffffffffff1661283e575060006108d0565b60ff84166000908152600460208190526040918290205491517ff7e83aee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163f7e83aee916128a7918791879101613193565b602060405180830381865afa1580156128c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190613494565b604080518082019091526060815260006020820152825182111561290b57600080fd5b602085015161291a8386613116565b111561294d5761294d8561293d876020015187866129389190613116565b6129d2565b6129489060026132c4565b6129e9565b60008086518051876020830101935080888701111561296c5787860182525b505050602084015b602084106129ac578051825261298b602083613116565b9150612998602082613116565b90506129a56020856130da565b9350612974565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6000818311156129e3575081610a20565b50919050565b81516129f5838361277d565b5061084983826127e2565b803560ff81168114612a1157600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff81168114612a3857600080fd5b50565b60008060408385031215612a4e57600080fd5b612a5783612a00565b91506020830135612a6781612a16565b809150509250929050565b803561ffff81168114612a1157600080fd5b60008083601f840112612a9657600080fd5b50813567ffffffffffffffff811115612aae57600080fd5b602083019150836020828501011115612ac657600080fd5b9250929050565b600080600060408486031215612ae257600080fd5b612aeb84612a72565b9250602084013567ffffffffffffffff811115612b0757600080fd5b612b1386828701612a84565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612b9657612b96612b20565b604052919050565b600082601f830112612baf57600080fd5b813567ffffffffffffffff811115612bc957612bc9612b20565b612bfa60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612b4f565b818152846020838601011115612c0f57600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215612c3e57600080fd5b6040516040810167ffffffffffffffff8282108183111715612c6257612c62612b20565b816040528293508435915080821115612c7a57600080fd5b612c8686838701612b9e565b83526020850135915080821115612c9c57600080fd5b50612ca985828601612b9e565b6020830152505092915050565b600080600080600060a08688031215612cce57600080fd5b612cd786612a72565b9450602086013567ffffffffffffffff80821115612cf457600080fd5b612d0089838a01612b9e565b95506040880135915080821115612d1657600080fd5b612d2289838a01612c2c565b94506060880135915080821115612d3857600080fd5b612d4489838a01612c2c565b93506080880135915080821115612d5a57600080fd5b50612d6788828901612b9e565b9150509295509295909350565b600060208284031215612d8657600080fd5b8135610a1d81612a16565b60008060008060808587031215612da757600080fd5b612db085612a72565b9350602085013567ffffffffffffffff80821115612dcd57600080fd5b612dd988838901612b9e565b94506040870135915080821115612def57600080fd5b612dfb88838901612c2c565b93506060870135915080821115612e1157600080fd5b50612e1e87828801612b9e565b91505092959194509250565b600080600060408486031215612e3f57600080fd5b833567ffffffffffffffff80821115612e5757600080fd5b818601915086601f830112612e6b57600080fd5b8135602082821115612e7f57612e7f612b20565b8160051b612e8e828201612b4f565b928352848101820192828101908b851115612ea857600080fd5b83870192505b84831015612ee457823586811115612ec65760008081fd5b612ed48d86838b0101612c2c565b8352509183019190830190612eae565b9850505087013592505080821115612efb57600080fd5b50612b1386828701612a84565b6000815180845260005b81811015612f2e57602081850181015186830182015201612f12565b81811115612f40576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a1d6020830184612f08565b600060208284031215612f9857600080fd5b610a1d82612a00565b60008060408385031215612fb457600080fd5b823567ffffffffffffffff80821115612fcc57600080fd5b612fd886838701612c2c565b93506020850135915080821115612fee57600080fd5b50612ffb85828601612b9e565b9150509250929050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019820361308657613086613044565b5060010190565b600181811c908216806130a157607f821691505b6020821081036129e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000828210156130ec576130ec613044565b500390565b600060ff821660ff84168060ff0382111561310e5761310e613044565b019392505050565b6000821982111561312957613129613044565b500190565b60008160030b8360030b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000183128115161561317157613171613044565b81637fffffff01831381161561318957613189613044565b5090039392505050565b6040815260006131a66040830185612f08565b8281036020840152610d108185612f08565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061ffff8084168061322b5761322b6131e7565b92169190910492915050565b600060ff821660ff84168082101561325157613251613044565b90039392505050565b60608152600061326d6060830186612f08565b828103602084015261327f8186612f08565b91505061ffff83166040830152949350505050565b6000602082840312156132a657600080fd5b5051919050565b6000816132bc576132bc613044565b506000190190565b60008160001904831182151516156132de576132de613044565b500290565b6000826132f2576132f26131e7565b500690565b600181815b8085111561333257816000190482111561331857613318613044565b8085161561332557918102915b93841c93908002906132fc565b509250929050565b60008261334957506001610a20565b8161335657506000610a20565b816001811461336c576002811461337657613392565b6001915050610a20565b60ff84111561338757613387613044565b50506001821b610a20565b5060208310610133831016604e8410600b84101617156133b5575081810a610a20565b6133bf83836132f7565b80600019048211156133d3576133d3613044565b029392505050565b6000610a1d838361333a565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561342157613421613044565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561345557613455613044565b50500390565b60608152600061346e6060830186612f08565b82810360208401526134808186612f08565b905082810360408401526122258185612f08565b6000602082840312156134a657600080fd5b81518015158114610a1d57600080fdfe00010203040506070809ffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fffffffffffffffffffff0a0b0c0d0e0f101112131415161718191a1b1c1d1e1fa264697066735822122044ecdc7938e995ea214268ebadb8d4d83adfe70ee006ffc4a279649e78f8a89064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_anchors": "The binary format RR entries for the root DS records."
        }
      },
      "deleteRRSet(uint16,bytes,(bytes,bytes),bytes)": {
        "details": "Deletes an RR from the oracle.",
        "params": {
          "deleteName": "which you want to delete",
          "deleteType": "The DNS record type to delete.",
          "nsec": "The signed NSEC RRset. This is in the format described in section        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature        data, followed by a series of canonicalised RR records that the signature        applies to."
        }
      },
      "deleteRRSetNSEC3(uint16,bytes,(bytes,bytes),(bytes,bytes),bytes)": {
        "details": "Deletes an RR from the oracle using an NSEC3 proof.      Deleting a record using NSEC3 requires using up to two NSEC3 records. There are two cases:       1. The name exists, but the record type doesn't. Eg, example.com has A records but no TXT records.       2. The name does not exist, but a parent name does.      In the first case, we submit one NSEC3 proof in `closestEncloser` that matches the target name      but does not have the bit for `deleteType` set in its type bitmap. In the second case, we submit      two proofs: closestEncloser and nextClosest, that together prove that the name does not exist.      NSEC3 records are in the format described in section 5.3.2 of RFC4035: The RRDATA section      from the RRSIG without the signature data, followed by a series of canonicalised RR records      that the signature applies to.",
        "params": {
          "closestEncloser": "An NSEC3 proof matching the closest enclosing name - that is,        the nearest ancestor of the target name that *does* exist.",
          "deleteName": "The name to delete.",
          "deleteType": "The DNS record type to delete.",
          "dnskey": "An encoded DNSKEY record that has already been submitted to the oracle and can be used        to verify the signatures closestEncloserSig and nextClosestSig",
          "nextClosest": "An NSEC3 proof covering the next closest name. This proves that the immediate        subdomain of the closestEncloser does not exist."
        }
      },
      "rrdata(uint16,bytes)": {
        "details": "Returns data about the RRs (if any) known to this oracle with the provided type and name.",
        "params": {
          "dnstype": "The DNS record type to query.",
          "name": "The name to query, in DNS label-sequence format."
        },
        "returns": {
          "_0": "inception The unix timestamp (wrapped) at which the signature for this RRSET was created.",
          "_1": "expiration The unix timestamp (wrapped) at which the signature for this RRSET expires.",
          "_2": "hash The hash of the RRset."
        }
      },
      "setAlgorithm(uint8,address)": {
        "details": "Sets the contract address for a signature verification algorithm.      Callable only by the owner.",
        "params": {
          "algo": "The address of the algorithm contract.",
          "id": "The algorithm ID"
        }
      },
      "setDigest(uint8,address)": {
        "details": "Sets the contract address for a digest verification algorithm.      Callable only by the owner.",
        "params": {
          "digest": "The address of the digest contract.",
          "id": "The digest ID"
        }
      },
      "setNSEC3Digest(uint8,address)": {
        "details": "Sets the contract address for an NSEC3 digest algorithm.      Callable only by the owner.",
        "params": {
          "digest": "The address of the digest contract.",
          "id": "The digest ID"
        }
      },
      "submitRRSet((bytes,bytes),bytes)": {
        "details": "Submits a signed set of RRs to the oracle. RRSETs are only accepted if they are signed with a key that is already trusted, or if they are self-signed, and the signing key is identified by a DS record that is already trusted.",
        "params": {
          "input": "The signed RR set. This is in the format described in section        5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature        data, followed by a series of canonicalised RR records that the signature        applies to.",
          "proof": "The DNSKEY or DS to validate the signature against. Must Already        have been submitted and proved previously."
        }
      },
      "submitRRSets((bytes,bytes)[],bytes)": {
        "details": "Submits multiple RRSets",
        "params": {
          "_proof": "The DNSKEY or DS to validate the first signature against.",
          "input": "A list of RRSets and signatures forming a chain of trust from an existing known-good record."
        },
        "returns": {
          "_0": "The last RRSET submitted."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4248,
        "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
        "label": "anchors",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6088,
        "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4413,
        "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
        "label": "rrsets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint16,t_struct(RRSet)4406_storage))"
      },
      {
        "astId": 4418,
        "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
        "label": "algorithms",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_contract(Algorithm)7495)"
      },
      {
        "astId": 4423,
        "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
        "label": "digests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_contract(Digest)9336)"
      },
      {
        "astId": 4428,
        "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
        "label": "nsec3Digests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_contract(NSEC3Digest)9458)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes20": {
        "encoding": "inplace",
        "label": "bytes20",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(Algorithm)7495": {
        "encoding": "inplace",
        "label": "contract Algorithm",
        "numberOfBytes": "20"
      },
      "t_contract(Digest)9336": {
        "encoding": "inplace",
        "label": "contract Digest",
        "numberOfBytes": "20"
      },
      "t_contract(NSEC3Digest)9458": {
        "encoding": "inplace",
        "label": "contract NSEC3Digest",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint16,t_struct(RRSet)4406_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint16 => struct DNSSECImpl.RRSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(RRSet)4406_storage)"
      },
      "t_mapping(t_uint16,t_struct(RRSet)4406_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct DNSSECImpl.RRSet)",
        "numberOfBytes": "32",
        "value": "t_struct(RRSet)4406_storage"
      },
      "t_mapping(t_uint8,t_contract(Algorithm)7495)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract Algorithm)",
        "numberOfBytes": "32",
        "value": "t_contract(Algorithm)7495"
      },
      "t_mapping(t_uint8,t_contract(Digest)9336)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract Digest)",
        "numberOfBytes": "32",
        "value": "t_contract(Digest)9336"
      },
      "t_mapping(t_uint8,t_contract(NSEC3Digest)9458)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract NSEC3Digest)",
        "numberOfBytes": "32",
        "value": "t_contract(NSEC3Digest)9458"
      },
      "t_struct(RRSet)4406_storage": {
        "encoding": "inplace",
        "label": "struct DNSSECImpl.RRSet",
        "members": [
          {
            "astId": 4401,
            "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
            "label": "inception",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4403,
            "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
            "label": "expiration",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4405,
            "contract": "contracts/dnssec-oracle/DNSSECImpl.sol:DNSSECImpl",
            "label": "hash",
            "offset": 8,
            "slot": "0",
            "type": "t_bytes20"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}